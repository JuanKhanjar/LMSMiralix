@page "/create-group/{CustomerId:int}"
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.Security.Claims;
@inject ICreateGroupUC _ICreateGroupUC

<EditForm Model="@group" OnSubmit="@CreateGroup">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="@group.GroupName">Group Name</label>
        <InputText id="@group.GroupName" @bind-Value="@group.GroupName" class="form-control" />
        <ValidationMessage For="@(() => group.GroupName)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Create Group</button>
    </div>
</EditForm>

@code {

    @code {
        [Parameter] public int CustomerId { get; set; }
        private Group group { get; set; } = new Group();
        private ClaimsPrincipal user;

        protected override async Task OnInitializedAsync()
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = authState.User;

            // Retrieve the CustomerId claim
            var customerIdClaim = user.FindFirstValue("CustomerId");

            if (!string.IsNullOrEmpty(customerIdClaim) && int.TryParse(customerIdClaim, out int customerId))
            {
                CustomerId = customerId;
            }
        }

        private async Task CreateGroup()
        {
            Console.WriteLine("CreateGroup method called");
            try
            {
                
                var createdGroup = await _ICreateGroupUC.ExecuteAsyn(CustomerId, group.GroupName);
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex);
                throw ;
            }
        }
    }

}

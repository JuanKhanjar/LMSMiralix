@page "/group-products/{groupId:int}"

@using LMS.BusinessUseCases.GroupProductUC.GroupProductUCInterfaces;
@inject IGetGroupProductsByGroupIdUC _IGetGroupProductsByGroupIdUC
<h3>Group Products for Group ID @groupId</h3>
<h3>TotalQuantity: </h3>

<table class="table card">
    <thead>
        <tr>
            <th>Type</th>
            <th>Cost</th>
            <th>Remaining</th>
            <th>Quantity</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (groupProducts != null)
        {
            @foreach (var groupProduct in groupProducts)
            {
                <tr>
                    <td>@groupProduct.Product.ProductName</td>
                    <td>@groupProduct.Product.ProductPrice</td>
                    <td>@groupProduct.AddedQuantity</td>
                    <td>
                        <input type="number" min="0"
                       @key="@groupProduct.GroupId"
                       @bind-value="@groupProduct.AddedQuantity"
                       @bind-value:event="oninput" />
                    </td>
                    <td>
                        <button class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">No group products found.</td>
            </tr>
        }

    </tbody>
</table>

@code {

    [Parameter]
    public int groupId { get; set; } 

    private IEnumerable<GroupProduct> groupProducts = new List<GroupProduct>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Call the GetGroupProductsByGroupIdUC to retrieve group products.
            groupProducts = await _IGetGroupProductsByGroupIdUC.ExecuteAsync(groupId);
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., display an error message).
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}

@page "/group/{customerId:int}/{groupId:int}"
@inherits ComponentBase
@inject IGetGroupWithProductsUC _IGetGroupWithProductsUC

@using LMS.BusinessUseCases.PurchasedProductsUC.PurchasedProductUCInterfaces;
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC

<div class="row">
    <div class="">
        @if (group != null)
        {
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="m-0">@group.GroupName / @group.EAN</h5>
                </div>
                <div class="card-body">
                    @if (group.GroupProducts != null && group.GroupProducts.Any())
                    {
                        <div class="card-body">
                            <table class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th>Type</th>
                                        <th>Cost</th>
                                        <th>Remaining</th>
                                        <th>Quantity</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var product in group.GroupProducts)
                                    {
                                        <tr>
                                            <td>@product.Product.ProductName</td>
                                            <td>@product.Product.ProductPrice.ToString("C")</td>
                                            <td>@product.AddedQuantity</td>
                                            <td>
                                                <input type="number" min="0" @bind-value="@product.AddedQuantity"
                                           @bind-value:event="oninput" />
                                            </td>
                                            <td><button>Delete</button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p>No Group Products.</p>
                    }
                </div>
            </div>
        }
    </div>

    <div class="">
        <table class="table">
            <thead>
                <tr>

                    <th>Type</th>
                    <th>Cost</th>
                    <th>Remaining</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                @if (purchasedProducts != null)
                {
                    @foreach (var product in purchasedProducts)
                    {
                        <tr>
                            <td>@product.ProductName</td>
                            <td>@product.ProductPrice</td>
                            <td>@product.PurchasedQty</td>
                            <td><input type="number" /></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4">No purchased products found.</td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="btn btn-success d-flex justify-content-end">Add</div>
    </div>

</div>

@code {

    [Parameter] public int customerId { get; set; }
    [Parameter] public int groupId { get; set; }

    private Group? group = new Group();
    private List<Product>? purchasedProducts = new List<Product>();

    //protected override async Task OnInitializedAsync()
    //{
    //    group = await _IGetGroupWithProductsUC.ExecuteAsync(customerId, groupId);
    //    if (group != null)
    //    {
    //        purchasedProducts = (await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId)).ToList();
    //    }
    //}


    private GroupDto groupDto = new GroupDto();
    private List<PurchasedProductDto> purchasedProductDtos = new List<PurchasedProductDto>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch the Group and Product data
        var group = await _IGetGroupWithProductsUC.ExecuteAsync(customerId, groupId);
        var purchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);

        // Convert Group and Product to DTOs
        groupDto = new GroupDto
            {
                GroupId = group?.GroupId ?? 0,
                GroupName = group?.GroupName,
                EAN = group?.EAN,
                CustomerId=group.CustomerId,
                Products = group?.GroupProducts?.Select(gp => new GroupProductDto
                {
                    ProductName = gp.Product?.ProductName,
                    ProductPrice = gp.Product?.ProductPrice ?? 0,
                    AddedQty = gp.AddedQuantity
                }).ToList() ?? new List<GroupProductDto>()
            };

        purchasedProductDtos = purchasedProducts?.Select(p => new PurchasedProductDto
            {
                ProductName = p.ProductName,
                ProductPrice = p.ProductPrice,
                PurchasedQty = p.PurchasedQty
            }).ToList() ?? new List<PurchasedProductDto>();
    }

    public class GroupDto
    {
        public int GroupId { get; set; }
        public string GroupName { get; set; }
        public string EAN { get; set; }
        public int CustomerId { get; set; }
        public List<GroupProductDto> Products { get; set; }
    }
    public class GroupProductDto
    {
        public string ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int AddedQty { get; set; }
    }
    public class PurchasedProductDto
    {
        public string ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int PurchasedQty { get; set; }
    }
}

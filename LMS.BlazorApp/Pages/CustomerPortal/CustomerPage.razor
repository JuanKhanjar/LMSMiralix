@page "/customer/{customerId:int}"
@using LMS.BlazorApp.Dtos;
@using LMS.BlazorApp.ExtensionsMethods;
@using LMS.BusinessUseCases.CustomerUCs.CustomerUCInterfaces;
@using LMS.BusinessCore.Extensions.GroupExtentionsMethods;
@using LMS.BusinessUseCases.GroupUCs.GroupUCInterfaces;
@using LMS.BusinessUseCases.PurchasedProductsUCs.PurchasedProductsUCsInterfaces;
@inject IGetCustomerWithGroupsAndProductsUC _IGetCustomerWithGroupsAndProductsUC
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC
@inject IUpdateGroupNameUC _IUpdateGroupNameUC
@using LMS.BlazorApp.Extensions;
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-md-5 card ">
            <!-- Customer Info Card -->
            <div class=" m-4 p-2">
                <p class="headerFont">Grupper (@customerGroups.Count())</p>
            </div>
            <!-- List of Groups -->
            @foreach (var group in customerGroups)
            {
                <div class=" mb-4">
                    <details>
                        <!--Group Header-->
                        <summary class="d-flex justify-content-between header2Font">
                            <div class="row row-cols-3">
                                <div class="col m-0">@_customer.CustomerName @group.GroupName </div>
                                <div class="col m-0"></div>
                                <div class="col m-0">EAN:<span class="text-secondary mx-4">@group.EAN</span> </div>

                                <div class="col m-0">Total:<span class="text-primary mx-4">@group.GetTotalPriceForAgroup().ToString("c2")</span></div>
                                <div class="col mx-0">(@group.GetTotalQuantityForAgroup()) licenses</div>
                                <div class="col m-0"></div>
                            </div>
                        </summary>

                        <!-- Group Products -->
                        <div class="card-body">
                            <table class="table table-borderless ">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Type</th>
                                        <th>Cost</th>
                                        <th>Remaining</th>
                                    </tr>
                                </thead>
                                <tbody class="">
                                    @foreach (var product in group.GroupProducts)
                                    {
                                        <tr>
                                            <td>@product.PurchasedProduct.ProductName</td>
                                            <td>@product.PurchasedProduct.ProductPrice.ToString("c2")</td>
                                            <td>@product.AddedQuantity</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="d-flex justify-content-between p-2">
                                <button class="btn btn-outline-secondary" @onclick="()=>ShowGroupDetails(group.GroupId)">Edit</button>
                                <button class="btn btn-outline-danger" @onclick="()=>ShowGroupDetails(group.GroupId)"><i class="fa fa-trash"></i></button>
                            </div>
                        </div>
                    </details>
                </div>
            }
        </div>
        <!-- Group Detalis -->
        <div class="col-md-7">
            @if (selectedGroupDto != null)
            {
                @if (displayGroupProducts == false)
                {
                    <!-- Form Group -->
                    <div class="m-4">
                        <p class="header2Font">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.InputPurchasedtQuantity))</p>
                        <p>Licenser kan redigeres til d.20 marts.</p>
                    </div>
                    <div class="m-3 d-flex">
                        <div class="card-body p-1 ">
                            <EditForm Model="selectedGroupDto" OnValidSubmit="UpdateGroupAsync" class="">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="row d-flex justify-content-center">
                                    <div class="form-group col-md-10 d-flex justify-content-between">
                                        <div class="form-group col-md-6">
                                            <label for="GroupName">Group Name:</label>
                                            <InputText id="GroupName" @bind-Value="selectedGroupDto.GroupName" class="form-control inputGroupName" />
                                            <ValidationMessage For="@(() => selectedGroupDto.GroupName)" />
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="EANName">EAN:</label>
                                            <input type="text" id="EANName" value="@selectedGroupDto.EAN" class="form-control inputGroupEAN bg-white" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                                        <button type="submit"
                                                class="btn btn-outline-success mx-4">


                                            <i class="fa fa-save"></i>
                                        </button>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                        <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                            <button type="submit" class="btn btn-outline-danger "><i class="fa fa-trash"></i></button>
                        </div>
                    </div>

                    <!-- Group Products -->
                    <h5 class="mt-4 p-2 headerFont">Selected Licenses</h5>
                    <!-- GroupProduct Table -->
                    <div class="m-4">
                        <div class="row mx-2 ">
                            <div class="col-sm-11 d-flex justify-content-sm-between align-baseline headerFont bg-light p-2 ">
                                <div class="col-sm-3 ">
                                    Type
                                </div>
                                <div class="col-sm-3 ">
                                    Cost
                                </div>
                                <div class="col-sm-3 ">
                                    Remaining
                                </div>
                                <div class="col-sm-3 ">
                                    Quantity
                                </div>
                            </div>

                            <div class="col-sm-1">
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (var groupProduct in selectedGroupDto.GroupProductsDto)
                                        {
                                            <tr class="d-flex justify-content-sm-between align-baseline ">
                                                <td>@groupProduct.ProductName</td>
                                                <td>@groupProduct.ProductPrice</td>
                                                <td>@groupProduct.AddedQty</td>
                                                <td>
                                                    <div class="position-relative">
                                                    <input type="number" 
                                                        class="inputNumber"
                                                           id="inputNumber@(groupProduct.PurchasedProductId)"
                                                           max="@(GetComparisonPurchasedQuantity(groupProduct)+1)"
                                                    @bind-value="@groupProduct.InputProductQuantity"
                                                    @oninput="() => UpdateGroupProductQuantity(groupProduct)" />
                                                    @if (GetComparisonPurchasedQuantity(groupProduct) == 0)
                                                    {
                                                        <span class=" text-white position-absolute top-50 end-100 translate-middle p-1 bg-danger rounded-pill">
                                                            @groupProduct.InputProductQuantity
                                                        </span>
                                                    }else
                                                        {
                                                            <span class=" text-white position-absolute top-50 end-100 translate-middle p-1 bg-success rounded-pill">
                                                                @groupProduct.InputProductQuantity
                                                            </span>
                                                        }
                                                    </div>
                                                </td>
                                                
                                                <td>
                                                    Input Value: @groupProduct.InputProductQuantity
                                                </td>
                                                <td>
                                                    PP Availabelity: @GetComparisonPurchasedQuantity(groupProduct)
                                                </td>
                                                <td>
                                                    <button class="btn btn-outline-danger" @onclick="()=>RemoveProduct(groupProduct.PurchasedProductId)"><i class="fa fa-trash"></i></button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>

                                    <tr class="d-flex justify-content-between gap-1">
                                        <td colspan="2"></td>
                                        <td class="d-flex justify-content-between align-items-baseline">
                                            <span>Total:</span>
                                            <span class="text-primary fw-bold">@selectedGroupDto.GroupProductsDto.Sum(p=> p.ProductPrice *( p.AddedQty+p.InputProductQuantity)).ToString("c")</span>
                                            <span>/</span>
                                            <span>(@selectedGroupDto.GroupProductsDto.Sum(p=> p.AddedQty + p.InputProductQuantity))</span>
                                            <span>licenser</span>
                                        </td>
                                    </tr>

                                </table>

                            </div>
                        </div>
                    </div>


                    <!-- Purchased Products Table -->
                    <h5 class="mt-4 p-2 headerFont">Choose from licenses</h5>
                    <div class="m-4">
                        <div class="row mx-2 ">
                            <div class="col-sm-11 d-flex justify-content-sm-between align-baseline headerFont fs-7 bg-light p-2">
                                <div class="col-sm-3 ">
                                    Type
                                </div>
                                <div class="col-sm-3 ">
                                    Cost
                                </div>
                                <div class="col-sm-3 ">
                                    Remaining
                                </div>
                                <div class="col-sm-3 ">
                                    Quantity
                                </div>
                            </div>

                            <div class="col-sm-1">
                            </div>
                        </div>

                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (var Purchasedproduct in purchasedProductDtos)
                                        {
                                            <tr class="d-flex justify-content-sm-between align-baseline ">
                                                <td>@Purchasedproduct.ProductName</td>
                                                <td>@Purchasedproduct.ProductPrice</td>
                                                <td>@Purchasedproduct.PurchasedQty</td>
                                                <td>
                                                    <div class="position-relative">
                                                        <input type="number"
                                                               class="inputNumber"
                                                               id="inputNumber@(Purchasedproduct.PurchasedProductId)"
                                                               min="0"
                                                               max="@(Purchasedproduct.PurchasedQty - GetComparisonGroupProductQuantity(Purchasedproduct))"
                                                        @bind="Purchasedproduct.InputPurchasedtQuantity"
                                                        @oninput="() => UpdatePurchasedProductQuantity(Purchasedproduct)" />

                                                        @if (Purchasedproduct.PurchasedQty - (GetComparisonGroupProductQuantity(Purchasedproduct) + Purchasedproduct.InputPurchasedtQuantity) == 0)
                                                        {
                                                            <span class=" text-white position-absolute top-50 end-100 translate-middle p-1 bg-danger rounded-pill">
                                                                @Purchasedproduct.InputPurchasedtQuantity
                                                            </span>
                                                        }
                                                    </div>

                                                </td>
                                                <td>
                                                    GP Value: @GetComparisonGroupProductQuantity(Purchasedproduct)
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <div class="d-flex justify-content-end">
                                    <button class="addBtn" @onclick="()=>AddPurchasedQuantitiesTGroupProduct(selectedGroupDto)">Add</button>
                                </div>
                            </div>
                            <div class="d-flex justify-content-end m-2">
                                <button class=" btnUndo mx-3 rounded-pill" @onclick="undoChanges">Disgard</button>
                                <button class=" btnSave">Save</button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card m-2 p-2 ">
                        <!-- Purchased Products Table -->
                        <h4 class="mt-2 headerFont">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.PurchasedQty))</h4>
                        <h5 class="header2Font">  Licenser kan redigeres til d.@DateTime.UtcNow.ToString("dd MM yyyy"). </h5>
                        <table class="table">
                            <thead class="bg-black">
                                <tr class="headerFont ">
                                    <th>Type</th>
                                    <th>Cost</th>
                                    <th>Remaining</th>
                                </tr>
                            </thead>
                            <tbody class="">
                                @foreach (var Purchasedproduct in purchasedProductDtos)
                                {
                                    <tr>
                                        <td>@Purchasedproduct.ProductName</td>
                                        <td>@Purchasedproduct.ProductPrice</td>
                                        <td>@Purchasedproduct.PurchasedQty</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="d-flex justify-content-end ">
                            <button class="btnAddGroup rounded-pill" @onclick="()=>CreateGroup()">Create Group</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div>
    @if (ProductChangesDto != null && ProductChangesDto.Any())
    {
        <table class="table">
            @foreach (var group in ProductChangesDto.GroupBy(p => p.ProductId))
            {
                <thead class="bg-black">
                    <tr class="headerFont">
                        <th>Product Id: @group.Key</th>
                    </tr>
                </thead>
                <thead class="bg-black">
                    <tr class="headerFont">

                        <th>CustomerId</th>
                        <th>GroupId</th>
                        <th>UpdatedGroupProductAddedQty</th>
                        <th>UpdatedPurchasedQty</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in group)
                    {
                        <tr>
                            <td>@item.CustomerId</td>
                            <td>@item.GroupId</td>
                            <td>@item.UpdatedGroupProductAddedQty</td>
                            <td>@item.UpdatedPurchasedQty</td>
                        </tr>
                    }
                </tbody>
            }
        </table>
    }
    else
    {
        <p>No data available.</p>
    }
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }
    private async Task undoChanges()
    {
        await LoadData();
        ShowGroupDetails(selectedGroup.GroupId);
    }
    #region Param
    [Parameter]
    public int customerId { get; set; }
    private Customer? _customer = new Customer();
    private Group selectedGroup = new Group();
    private IEnumerable<Group> customerGroups = new List<Group>();
    private IEnumerable<PurchasedProduct> _PurchasedProducts = new List<PurchasedProduct>();
    private bool displayGroupProducts = true; // Flag to control GroupProduct Table display
    #endregion

    #region Dto Interacts Mehtods And Param

    private GroupDto? selectedGroupDto = new GroupDto();
    private IEnumerable<GroupDto> customerGroupsDto = new List<GroupDto>();
    private List<GroupProductDto>? groupProductDtos = new List<GroupProductDto>();
    private List<PurchasedProductDto>? purchasedProductDtos = new List<PurchasedProductDto>();
    private List<ProductChangeDto>? ProductChangesDto = new List<ProductChangeDto>();

    private async Task LoadData()
    {
        // Load customer data, groups, and purchased products
        _customer = await _IGetCustomerWithGroupsAndProductsUC.ExecuteAsync(customerId);
        if (_customer != null)
        {
            // Load and map customer groups
            LoadCustomerGroups();

            // Load and map purchased products
            await LoadPurchasedProducts();
        }
    }
    private void LoadCustomerGroups()
    {
        customerGroups = _customer.Groups.ToList();
        if (customerGroups != null)
        {
            customerGroupsDto = customerGroups.Select(group => MapToGroupDto(group)).ToList();
        }
    }
    private async Task LoadPurchasedProducts()
    {
        _PurchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);
        if (_PurchasedProducts != null)
        {
            purchasedProductDtos = _PurchasedProducts.Select(p => MapToPurchasedProductDto(p)).ToList();
        }
    }
    private GroupDto MapToGroupDto(Group group)
    {
        if (group == null)
        {
            return null;
        }

        return new GroupDto
            {
                GroupId = group.GroupId,
                GroupName = group.GroupName,
                EAN = group.EAN,
                CustomerId = customerId,
                GroupProductsDto = group.GroupProducts.Select(gp => MapToGroupProductDto(gp)).ToList()
            };
    }
    private GroupProductDto MapToGroupProductDto(GroupProduct groupProduct)
    {
        if (groupProduct == null)
        {
            return null;
        }

        return new GroupProductDto
            {
                GroupId = groupProduct.GroupId,
                PurchasedProductId = groupProduct.PurchasedProductId,
                ProductName = groupProduct.PurchasedProduct?.ProductName,
                ProductPrice = groupProduct.PurchasedProduct?.ProductPrice ?? 0.00M,
                AddedQty = groupProduct.AddedQuantity

            };
    }
    private PurchasedProductDto MapToPurchasedProductDto(PurchasedProduct purchasedProduct)
    {
        if (purchasedProduct == null)
        {
            return null;
        }

        return new PurchasedProductDto
            {
                PurchasedProductId = purchasedProduct.ProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                PurchasedQty = purchasedProduct.PurchasedQty,
                CustomerId = customerId
            };
    }
    #endregion

    #region Manpulate
    private async Task UpdateGroupAsync()
    {
        bool confirmed = await JSRuntime.ShowSweetAlertConfirmationAsync($"Er du sikker på at du vil opdaterer gruppen\nAarhus Kommune {selectedGroupDto.GroupName}?");

        if (confirmed)
        {
            var result = await _IUpdateGroupNameUC.ExcecuteAsync(selectedGroupDto.GroupId, selectedGroupDto.GroupName);
            if (result)
            {
                // Update was successful, show a success notification
                await JSRuntime.ShowSweetAlertSuccessAsync("Update Successful", "The group name has been updated successfully.");
            }
        }
        else
        {
            // The user clicked "Cancel," do nothing or show a message.
        }
    }
    #endregion

    #region User Interacting
    private void RemoveProduct(int productId)
    {
        var groupProduct = selectedGroupDto.GroupProductsDto.FirstOrDefault(p => p.PurchasedProductId == productId);
        var purchasedProduct = purchasedProductDtos.FirstOrDefault(p => p.PurchasedProductId == productId);

        if (groupProduct != null && purchasedProduct != null)
        {
            // Add the removed quantity back to PurchasedQty

            purchasedProduct.PurchasedQty += groupProduct.AddedQty;
            purchasedProduct.InputPurchasedtQuantity = 0;
            // Remove the product from the list
            selectedGroupDto.GroupProductsDto.Remove(groupProduct);
        }
    }

    private void UpdateGroupProductQuantity(GroupProductDto groupProductDto)
    {
        groupProductDto.InputProductQuantity = 1;
        PurchasedProductDto? purchasedProduct = purchasedProductDtos.FirstOrDefault(p => p.PurchasedProductId == groupProductDto.PurchasedProductId);
        if (purchasedProduct != null && purchasedProduct.PurchasedQty>0)
        {
            purchasedProduct.PurchasedQty -= groupProductDto.InputProductQuantity;
        }
        else
        {
            // Handle other logic as needed
        }

    }
    private int GetComparisonPurchasedQuantity(GroupProductDto groupProduct)
    {
        // Find the corresponding product in the comparisonList
        var matchingComparisonProduct = purchasedProductDtos.FirstOrDefault(comparisonProduct =>
            comparisonProduct.PurchasedProductId == groupProduct.PurchasedProductId);

        if (matchingComparisonProduct != null)
        {
            return (matchingComparisonProduct.PurchasedQty);
        }
        else
        {
            return 0; // Return a default value when no matching product is found
        }
    }
    private int GetComparisonGroupProductQuantity(PurchasedProductDto purchasedProduct)
    {
        // Find the corresponding product in the comparisonList
        var matchingComparisonProduct = selectedGroupDto.GroupProductsDto.FirstOrDefault(comparisonProduct =>
            comparisonProduct.PurchasedProductId == purchasedProduct.PurchasedProductId);

        if (matchingComparisonProduct != null)
        {
            return (matchingComparisonProduct.InputProductQuantity);
        }
        else
        {
            return 0; // Return a default value when no matching product is found
        }
    }
    private void UpdatePurchasedProductQuantity(PurchasedProductDto? purchasedProductDto)
    {
        // Find the corresponding GroupProduct
        var groupProduct = groupProductDtos.FirstOrDefault(gp => gp.PurchasedProductId == purchasedProductDto.PurchasedProductId);

        if (groupProduct != null)
        {

        }
        else
        {

        }
    }
    private void AddPurchasedQuantitiesTGroupProduct(GroupDto selectedGroup)
    {
        foreach (PurchasedProductDto purchasedProduct in purchasedProductDtos)
        {
            if (purchasedProduct.InputPurchasedtQuantity > 0 && purchasedProduct.PurchasedQty>0)
            {
                // Retrieve the corresponding product in the GroupProductsDto list
                GroupProductDto groupProductToUpdate = selectedGroup.GroupProductsDto
                 .FirstOrDefault(gp => gp.PurchasedProductId == purchasedProduct.PurchasedProductId);

                if (groupProductToUpdate != null)
                {
                    groupProductToUpdate.InputProductQuantity += purchasedProduct.InputPurchasedtQuantity;
                    purchasedProduct.PurchasedQty-=purchasedProduct.InputPurchasedtQuantity;
                    purchasedProduct.InputPurchasedtQuantity = 0;
                }
                else
                {
                    //CreateNewGroupProduct(selectedGroup, purchasedProduct);
                    GroupProductDto newGroupProduct = new GroupProductDto
                        {
                            GroupId = selectedGroup.GroupId,
                            PurchasedProductId = purchasedProduct.PurchasedProductId,
                            ProductName = purchasedProduct.ProductName,
                            ProductPrice = purchasedProduct.ProductPrice,
                            AddedQty = purchasedProduct.InputPurchasedtQuantity,
                            InputProductQuantity = 0
                        };
                    purchasedProduct.PurchasedQty -= purchasedProduct.InputPurchasedtQuantity;
                    purchasedProduct.InputPurchasedtQuantity = 0;
                    selectedGroup.GroupProductsDto.Add(newGroupProduct);
                   
                }
            }
        }

        StateHasChanged();
    }

    #endregion

    #region Helper Methods

    private void UpdateQuantities(GroupProductDto groupProduct, PurchasedProductDto purchasedProduct, int inputQuantity)
    {
        groupProduct.InputProductQuantity = inputQuantity;
        purchasedProduct.InputPurchasedtQuantity = 0;
    }

    private void TrackChange(int groupId, int productId, int updatedAddedQty, int updatedPurchasedQty)
    {
        ProductChangeDto changeDto = new ProductChangeDto
            {
                CustomerId = customerId,
                GroupId = groupId,
                ProductId = productId,
                UpdatedGroupProductAddedQty = updatedAddedQty,
                UpdatedPurchasedQty = updatedPurchasedQty
            };

        ProductChangesDto.Add(changeDto);
    }

    private void CreateNewGroupProduct(GroupDto selectedGroup, PurchasedProductDto purchasedProduct)
    {
        GroupProductDto newGroupProduct = new GroupProductDto
            {
                GroupId = selectedGroup.GroupId,
                PurchasedProductId = purchasedProduct.PurchasedProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                AddedQty = purchasedProduct.InputPurchasedtQuantity,
                InputProductQuantity = purchasedProduct.InputPurchasedtQuantity
            };

        selectedGroup.GroupProductsDto.Add(newGroupProduct);
    }
    #endregion

    #region Methods
    private void ShowGroupDetails(int groupId)
    {
        if (groupId > 0)
        {
            // Find the selected group and set it as the selectedGroup
            selectedGroupDto = customerGroupsDto.FirstOrDefault(g => g.GroupId == groupId);
            ProductChangesDto = ProductChangesDto.Where(c => c.CustomerId == customerId && c.GroupId == groupId).ToList();
            displayGroupProducts = false; // Hide GroupProduct Table
        }
        else
        {
            // Clear the selectedGroup and show the GroupProduct Table
            selectedGroupDto = new GroupDto();
            displayGroupProducts = true;
        }
    }
    #endregion

    private async Task ShowValidationError(string message)
    {
        await JSRuntime.ShowValidationErrorAsync(message);
    }

    private void CreateGroup()
    {
        // Implement the logic to create a group here
        // For example, you can navigate to the CreateNewGroupPage with a route parameter
        NavigationManager.NavigateTo($"/create-group/{customerId}", forceLoad: true);
    }

    #region Dto Classes

    public class ProductChangeDto
    {
        public int CustomerId { get; set; }
        public int GroupId { get; set; }
        public int ProductId { get; set; }
        public int UpdatedGroupProductAddedQty { get; set; }
        public int UpdatedPurchasedQty { get; set; }
    }
    #endregion

}

@page "/customer/{customerId:int}"
@using LMS.BusinessUseCases.CustomerUCs.CustomerUCInterfaces;
@using LMS.BusinessCore.Extensions.GroupExtentionsMethods;
@using LMS.BusinessUseCases.GroupUCs.GroupUCInterfaces;
@using LMS.BusinessUseCases.PurchasedProductsUCs.PurchasedProductsUCsInterfaces;
@inject IGetCustomerWithGroupsAndProductsUC _IGetCustomerWithGroupsAndProductsUC
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC
@inject IUpdateGroupNameUC _IUpdateGroupNameUC
@using LMS.BlazorApp.Extensions;
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-md-5 card ">
            <!-- Customer Info Card -->
            <div class=" m-4 p-2">
                <p class="headerFont">Grupper (@customerGroups.Count())</p>
            </div>
            <!-- List of Groups -->
            @foreach (var group in customerGroups)
            {
                <div class=" mb-4">
                    <details>
                        <!--Group Header-->
                        <summary class="d-flex justify-content-between header2Font">
                            <div class="row row-cols-3">
                                <div class="col m-0">@_customer.CustomerName @group.GroupName </div>
                                <div class="col m-0"></div>
                                <div class="col m-0">EAN:<span class="text-secondary mx-4">@group.EAN</span> </div>

                                <div class="col m-0">Total:<span class="text-primary mx-4">@group.GetTotalPriceForAgroup().ToString("c2")</span></div>
                                <div class="col mx-0">(@group.GetTotalQuantityForAgroup()) licenses</div>
                                <div class="col m-0"></div>
                            </div>
                        </summary>

                        <!-- Group Products -->
                        <div class="card-body">
                            <table class="table table-borderless ">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Type</th>
                                        <th>Cost</th>
                                        <th>Remaining</th>
                                    </tr>
                                </thead>
                                <tbody class="">
                                    @foreach (var product in group.GroupProducts)
                                    {
                                        <tr>
                                            <td>@product.PurchasedProduct.ProductName</td>
                                            <td>@product.PurchasedProduct.ProductPrice.ToString("c2")</td>
                                            <td>@product.AddedQuantity</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="d-flex justify-content-between p-2">
                                <button class="btn btn-outline-secondary" @onclick="()=>ShowGroupDetails(group.GroupId)">Edit</button>
                                <button class="btn btn-outline-danger" @onclick="()=>ShowGroupDetails(group.GroupId)"><i class="fa fa-trash"></i></button>
                            </div>
                        </div>
                    </details>
                </div>
            }
        </div>
        <!-- Group Detalis -->
        <div class="col-md-7 card">
            @if (selectedGroupDto != null)
            {
                @if (displayGroupProducts == false)
                {
                    <!-- Form Group -->
                    <div class="m-4">
                        <p class="header2Font">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.InputPurchasedtQuantity))</p>
                        <p>Licenser kan redigeres til d.20 marts.</p>
                    </div>
                    <div class="m-3 d-flex">
                        <div class="card-body p-1 ">
                            <EditForm Model="selectedGroupDto" OnValidSubmit="UpdateGroupAsync" class="">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="row d-flex justify-content-center">
                                    <div class="form-group col-md-10 d-flex justify-content-between">
                                        <div class="form-group col-md-6">
                                            <label for="GroupName">Group Name:</label>
                                            <InputText id="GroupName" @bind-Value="selectedGroupDto.GroupName" class="form-control inputGroupName" />
                                            <ValidationMessage For="@(() => selectedGroupDto.GroupName)" />
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="EANName">EAN:</label>
                                            <input type="text" id="EANName" value="@selectedGroupDto.EAN" class="form-control inputGroupEAN bg-white" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                                        <button type="submit"
                                                class="btn btn-outline-success mx-4">


                                            <i class="fa fa-save"></i>
                                        </button>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                        <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                            <button type="submit" class="btn btn-outline-danger "><i class="fa fa-trash"></i></button>
                        </div>
                    </div>

                    <!-- Group Products -->
                    <h5 class="mt-4 p-2 headerFont">Selected Licenses</h5>
                    <!-- GroupProduct Table -->
                    <div class="m-4">
                        <div class="row ">
                            <div class="col-sm-11 d-flex justify-content-sm-between align-baseline fw-bolder font-Rajdhani fs-6 bg-light p-2">
                                <div class="col-sm-3 ">
                                    Type
                                </div>
                                <div class="col-sm-3 ">
                                    Cost
                                </div>
                                <div class="col-sm-3 ">
                                    Remaining
                                </div>
                                <div class="col-sm-3 ">
                                    Quantity
                                </div>
                            </div>

                            <div class="col-sm-1">
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless  fs-7">
                                    <tbody>
                                        @foreach (var product in selectedGroupDto.GroupProductsDto)
                                        {
                                            <tr class="d-flex justify-content-sm-between align-baseline ">
                                                <td>@product.ProductName</td>
                                                <td>@product.ProductPrice</td>
                                                <td>@product.AddedQty</td>
                                                <td>
                                                    <input type="number" class="inputNumber"
                                               @key="product.PurchasedProductId"
                                                           min="0"
                                               @bind-value="@product.InputProductQuantity"
                                               @oninput="() => UpdateGroupProductQuantities(product)" />
                                                </td>
                                                <td>
                                                    <button class="btn btn-outline-danger" @onclick="()=>RemoveProduct(product)"><i class="fa fa-trash"></i></button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>

                                    @*<tr>
                            <td colspan="4">
                            </td>
                            <td class="d-flex justify-content-end">
                            Total:@selectedGroupDto.CalculateTotalPrice().ToString("c2")/(@selectedGroupDto.CalculateTotalQuantity())
                            </td>
                            <td>
                            </td>
                            </tr>*@

                                </table>

                            </div>
                        </div>
                    </div>


                    <!-- Purchased Products Table -->
                    <h5 class="mt-4 headerFont">Choose from licenses</h5>
                    <div class="m-4">
                        <div class="row ">
                            <div class="col-sm-11 d-flex justify-content-sm-between align-baseline fw-bolder font-Rajdhani fs-6 bg-light p-2">
                                <div class="col-sm-3 ">
                                    Type
                                </div>
                                <div class="col-sm-3 ">
                                    Cost
                                </div>
                                <div class="col-sm-3 ">
                                    Remaining
                                </div>
                                <div class="col-sm-3 ">
                                    Quantity
                                </div>
                            </div>

                            <div class="col-sm-1">
                            </div>
                        </div>

                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless  fs-7">
                                    <tbody>
                                        @foreach (var Purchasedproduct in purchasedProductDtos)
                                        {
                                            <tr class="d-flex justify-content-sm-between align-baseline ">
                                                <td>@Purchasedproduct.ProductName</td>
                                                <td>@Purchasedproduct.ProductPrice</td>
                                                <td>@Purchasedproduct.PurchasedQty</td>
                                                <td>
                                                    <input @key="Purchasedproduct.PurchasedProductId" class="inputNumber"
                                                           type="number"
                                                           min="0"
                                               @bind-value="@Purchasedproduct.InputPurchasedtQuantity" />
                                                </td>
                                                <td></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <div class="d-flex justify-content-end">
                                    <button class=" addBtn" @onclick="()=>UpdatePurchasedQuantities(selectedGroupDto)">Add</button>
                                </div>
                            </div>
                            <div class="d-flex justify-content-end m-2">
                                <button class=" btnUndo mx-3 rounded-pill">Disgard</button>
                                <button class=" btnSave">Save</button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card m-2 p-2 ">
                        <!-- Purchased Products Table -->
                        <h4 class="mt-2 headerFont">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.PurchasedQty))</h4>
                        <h5 class="header2Font">  Licenser kan redigeres til d.@DateTime.UtcNow.ToString("dd MM yyyy"). </h5>
                        <table class="table table-borderless  ">
                            <thead class="bg-light fw-bold fs-6">
                                <tr>
                                    <th>Type</th>
                                    <th>Cost</th>
                                    <th>Remaining</th>
                                </tr>
                            </thead>
                            <tbody class="">
                                @foreach (var Purchasedproduct in purchasedProductDtos)
                                {
                                    <tr>
                                        <td>@Purchasedproduct.ProductName</td>
                                        <td>@Purchasedproduct.ProductPrice</td>
                                        <td>@Purchasedproduct.PurchasedQty</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="d-flex justify-content-end ">
                            <button class="btnAddGroup rounded-pill" @onclick="()=>CreateGroup()">Create Group</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>



@code {

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    #region Param
    [Parameter]
    public int customerId { get; set; }
    private Customer? _customer = new Customer();
    private Group selectedGroup = new Group();
    private IEnumerable<Group> customerGroups = new List<Group>();
    private IEnumerable<PurchasedProduct> _PurchasedProducts = new List<PurchasedProduct>();
    private bool displayGroupProducts = true; // Flag to control GroupProduct Table display
    #endregion



    #region Dto Interacts Mehtods And Param

    private GroupDto? selectedGroupDto = new GroupDto();
    private IEnumerable<GroupDto> customerGroupsDto = new List<GroupDto>();
    private List<GroupProductDto>? groupProductDtos = new List<GroupProductDto>();
    private List<PurchasedProductDto>? purchasedProductDtos = new List<PurchasedProductDto>();

    private async Task LoadData()
    {
        // Fetch the customer's groups from the repository
        _customer = await _IGetCustomerWithGroupsAndProductsUC.ExecuteAsync(customerId);
        if (_customer != null)
        {
            customerGroups = _customer.Groups.ToList();
            if (customerGroups != null)
            {
                customerGroupsDto = _customer.Groups.Select(group => new GroupDto
                    {
                        GroupId = group.GroupId,
                        GroupName = group.GroupName,
                        EAN = group.EAN,
                        CustomerId = customerId,
                        GroupProductsDto = group.GroupProducts.Select(gp => new GroupProductDto
                        {
                            GroupId = gp.GroupId,
                            PurchasedProductId = gp.PurchasedProductId,
                            ProductName = gp.PurchasedProduct.ProductName,
                            ProductPrice = gp.PurchasedProduct.ProductPrice,
                            AddedQty = gp.AddedQuantity,
                            InputProductQuantity = 0 // Set the default value as needed
                        }).ToList()
                    }).ToList();
            }
            _PurchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);
        }

        // Convert Group and Product to DTOs
        selectedGroupDto = new GroupDto
            {
                GroupId = selectedGroup?.GroupId ?? 0,
                GroupName = selectedGroup?.GroupName,
                EAN = selectedGroup?.EAN,
                CustomerId = customerId,//same login customer
                GroupProductsDto = selectedGroup?.GroupProducts?.Select(gp => new GroupProductDto
                {
                    GroupId = selectedGroup?.GroupId ?? 0,
                    PurchasedProductId = gp.PurchasedProductId,
                    ProductName = gp.PurchasedProduct?.ProductName,
                    ProductPrice = gp.PurchasedProduct?.ProductPrice ?? 0.00M,
                    AddedQty = gp.AddedQuantity,
                    InputProductQuantity = 0 // Set the default value as needed
                }).ToList() ?? new List<GroupProductDto>()
            };

        purchasedProductDtos = _PurchasedProducts?.Select(p => new PurchasedProductDto
            {
                PurchasedProductId = p.ProductId,
                ProductName = p.ProductName,
                ProductPrice = p.ProductPrice,
                PurchasedQty = p.PurchasedQty,
                CustomerId = customerId,//same login customer
                InputPurchasedtQuantity = 0 // Set the default value as needed
            }).ToList() ?? new List<PurchasedProductDto>();
    }
    #endregion

    #region Manpulate
    private async Task UpdateGroupAsync()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil opdaterer gruppen\nAarhus Kommune {selectedGroupDto.GroupName}?");

        if (confirmed)
        {
            var result = await _IUpdateGroupNameUC.ExcecuteAsync(selectedGroupDto.GroupId, selectedGroupDto.GroupName);
            if (result)
            {
                // Update was successful, show a success notification
                await JSRuntime.InvokeVoidAsync("showSweetAlertSuccess", "Update Successful", "The group name has been updated successfully.");
            }
        }
        else
        {
            // The user clicked "Cancel," do nothing or show a message.
        }
    }

    private void UpdateGroupProductQuantities(GroupProductDto groupProduct)
    {
        // Find the corresponding PurchasedProductDto using PurchasedProductId
        PurchasedProductDto purchasedProduct = purchasedProductDtos.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);
        groupProduct.InputProductQuantity = 1;
        // Ensure the input quantity is within the valid range
        if (groupProduct.InputProductQuantity > 0 && groupProduct.InputProductQuantity <= purchasedProduct.PurchasedQty)
        {
            if (purchasedProduct != null)
            {
                // Update the AddedQty for the selected GroupProductDto
                groupProduct.AddedQty += groupProduct.InputProductQuantity;

                // Update the PurchasedQty for the corresponding PurchasedProductDto
                purchasedProduct.PurchasedQty -= groupProduct.InputProductQuantity;
                groupProduct.InputProductQuantity = 0;

                // Create a ProductChangeDto object to track the change
                //ProductChangeDto change = new ProductChangeDto
                //    {
                //        CustomerId = customerId,
                //        GroupId = groupProduct.GroupId,
                //        ProductId = groupProduct.PurchasedProductId,
                //        UpdatedGroupProductAddedQty = groupProduct.inpuProductQuantity,
                //        UpdatedPurchasedQty = groupProduct.inpuProductQuantity
                //    };

                //// Add the change to the list
                //productChanges.Add(change);

                // Trigger a UI update to reflect the changes in the table
                StateHasChanged();
            }
        }
        else
        {
            // Show a validation error using JavaScript interop
            ShowValidationError($"Ugyldig inputmængde!:\nYor reached the the total available  for  product: {(purchasedProduct.PurchasedQty)} . Please check amout.");
            groupProduct.InputProductQuantity = 0;
            StateHasChanged();
        }
    }

    private void RemoveProduct(GroupProductDto product)
    {
        // Find the corresponding PurchasedProduct by ProductId
        PurchasedProductDto purchasedProduct = purchasedProductDtos.FirstOrDefault(p => p.PurchasedProductId == product.PurchasedProductId);

        if (purchasedProduct != null)
        {
            // Add the removed quantity back to PurchasedQty
            purchasedProduct.PurchasedQty += product.AddedQty;
        }

        // Remove the product from the list
        selectedGroupDto.GroupProductsDto.Remove(product);

        // Set AddedQty to 0 for the removed product
        product.AddedQty = 0;
    }

    private void UpdatePurchasedQuantities(GroupDto selectedGroupDto)
    {
        // Create a copy of purchasedProductDtos
        var purchasedProductDtosCopy = purchasedProductDtos.ToList();
        foreach (PurchasedProductDto purchasedProduct in purchasedProductDtosCopy)
        {

            // Ensure the input quantity is within the valid range
            if (purchasedProduct.InputPurchasedtQuantity > 0 && purchasedProduct.InputPurchasedtQuantity <= purchasedProduct.PurchasedQty)
            {
                // Calculate the change based on the input quantity
                int change = purchasedProduct.PurchasedQty - purchasedProduct.InputPurchasedtQuantity;

                // Find and update the corresponding product in the GroupProductsDto list
                GroupProductDto? groupProductToUpdate = selectedGroupDto.GroupProductsDto.FirstOrDefault(gp => gp.PurchasedProductId == purchasedProduct.PurchasedProductId);

                if (groupProductToUpdate != null)
                {
                    // Update the AddedQty for the selected product in the GroupProductsDto list
                    groupProductToUpdate.AddedQty += purchasedProduct.InputPurchasedtQuantity;

                    // Update the PurchasedQty for the current product
                    purchasedProduct.PurchasedQty = change;
                    purchasedProduct.InputPurchasedtQuantity = 0;
                    //if (purchasedProduct.PurchasedQty<=0)
                    //{
                    //    purchasedProductDtos.Remove(purchasedProduct);
                    //}
                    //// Create a ProductChangeDto object to track the change for this product
                    //var changeDto = new ProductChangeDto
                    //    {
                    //        CustomerId = purchasedProduct.CustomerId,
                    //        GroupId = group.GroupId,
                    //        ProductId = purchasedProduct.ProductId,
                    //        UpdatedGroupProductAddedQty = purchasedProduct.inpuPurchasedtQuantity,
                    //        UpdatedPurchasedQty = change
                    //    };

                    //// Add the change to the list
                    //productChanges.Add(changeDto);
                }
                else
                {
                    // If the corresponding product doesn't exist in the GroupProductsDto list, create a new one
                    GroupProductDto newGroupProduct = new GroupProductDto
                        {
                            GroupId = selectedGroupDto.GroupId,
                            PurchasedProductId = purchasedProduct.PurchasedProductId,
                            ProductName = purchasedProduct.ProductName,
                            ProductPrice = purchasedProduct.ProductPrice,
                            AddedQty = purchasedProduct.InputPurchasedtQuantity,
                            InputProductQuantity = 0
                        };

                    purchasedProduct.PurchasedQty = change;

                    // Add the new GroupProductDto to the list
                    selectedGroupDto.GroupProductsDto.Add(newGroupProduct);

                    // Create a ProductChangeDto object to track the change for this product
                    //var changeDto = new ProductChangeDto
                    //    {
                    //        CustomerId = purchasedProduct.CustomerId,
                    //        GroupId = group.GroupId,
                    //        ProductId = purchasedProduct.ProductId,
                    //        UpdatedGroupProductAddedQty = purchasedProduct.inpuPurchasedtQuantity,
                    //        UpdatedPurchasedQty = change * -1 // To indicate a subtraction
                    //    };

                    //// Add the change to the list
                    //productChanges.Add(changeDto);
                }
            }
        }

        // Trigger a UI update to reflect the changes in the table
        StateHasChanged();
    }
    #endregion

    #region Methods
    private void ShowGroupDetails(int groupId)
    {
        if (groupId > 0)
        {
            // Find the selected group and set it as the selectedGroup
            selectedGroupDto = customerGroupsDto.FirstOrDefault(g => g.GroupId == groupId);
            displayGroupProducts = false; // Hide GroupProduct Table
        }
        else
        {
            // Clear the selectedGroup and show the GroupProduct Table
            selectedGroupDto = new GroupDto();
            displayGroupProducts = true;
        }
    }
    #endregion

    private void ShowValidationError(string message)
    {
        JSRuntime.InvokeVoidAsync("showValidationError", message);
    }

    private void CreateGroup()
    {
        // Implement the logic to create a group here
        // For example, you can navigate to the CreateNewGroupPage with a route parameter
        NavigationManager.NavigateTo($"/create-group/{customerId}", forceLoad: true);
    }

    #region Dto Classes
    public class GroupDto
    {
        public int GroupId { get; set; }//pk
        public string? GroupName { get; set; }
        public string? EAN { get; set; }
        public int CustomerId { get; set; }//fk
        public List<GroupProductDto> GroupProductsDto { get; set; } = new List<GroupProductDto>();
    }

    public class GroupProductDto
    {
        public int GroupId { get; set; }//fk
        public int PurchasedProductId { get; set; }//fk
        public string? ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int AddedQty { get; set; }
        public int InputProductQuantity { get; set; }
    }

    public class PurchasedProductDto
    {
        public int PurchasedProductId { get; set; }//pk
        public string? ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int PurchasedQty { get; set; }
        public int CustomerId { get; set; }//fk
        public int InputPurchasedtQuantity { get; set; }
    }

    public class ProductChangeDto
    {
        public int CustomerId { get; set; }
        public int GroupId { get; set; }
        public int ProductId { get; set; }
        public int UpdatedGroupProductAddedQty { get; set; }
        public int UpdatedPurchasedQty { get; set; }
    }
    #endregion

}

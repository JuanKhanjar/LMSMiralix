@page "/customer/{customerId:int}"
@using LMS.BusinessUseCases.CustomerUCs.CustomerUCInterfaces;
@using LMS.BusinessCore.Extensions.GroupExtentionsMethods;
@using LMS.BusinessUseCases.GroupUCs.GroupUCInterfaces;
@using LMS.BusinessUseCases.PurchasedProductsUCs.PurchasedProductsUCsInterfaces;
@inject IGetCustomerWithGroupsAndProductsUC _IGetCustomerWithGroupsAndProductsUC
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC
@inject IUpdateGroupNameUC _IUpdateGroupNameUC
@using LMS.BlazorApp.Extensions;
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-md-5 card ">
            <!-- Customer Info Card -->
            <div class=" m-4 p-2">
                <p class="headerFont">Grupper (@customerGroups.Count())</p>
            </div>
            <!-- List of Groups -->
            @foreach (var group in customerGroups)
            {
                <div class=" mb-4">
                    <details>
                        <!--Group Header-->
                        <summary class="d-flex justify-content-between header2Font">
                            <div class="row row-cols-3">
                                <div class="col m-0">@_customer.CustomerName @group.GroupName </div>
                                <div class="col m-0"></div>
                                <div class="col m-0">EAN:<span class="text-secondary mx-4">@group.EAN</span> </div>

                                <div class="col m-0">Total:<span class="text-primary mx-4">@group.GetTotalPriceForAgroup().ToString("c2")</span></div>
                                <div class="col mx-0">(@group.GetTotalQuantityForAgroup()) licenses</div>
                                <div class="col m-0"></div>
                            </div>
                        </summary>

                        <!-- Group Products -->
                        <div class="card-body">
                            <table class="table table-borderless ">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Type</th>
                                        <th>Cost</th>
                                        <th>Remaining</th>
                                    </tr>
                                </thead>
                                <tbody class="">
                                    @foreach (var product in group.GroupProducts)
                                    {
                                        <tr>
                                            <td>@product.PurchasedProduct.ProductName</td>
                                            <td>@product.PurchasedProduct.ProductPrice.ToString("c2")</td>
                                            <td>@product.AddedQuantity</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="d-flex justify-content-between p-2">
                                <button class="btn btn-outline-secondary" @onclick="()=>ShowGroupDetails(group.GroupId)">Edit</button>
                                <button class="btn btn-outline-danger" @onclick="()=>ShowGroupDetails(group.GroupId)"><i class="fa fa-trash"></i></button>
                            </div>
                        </div>
                    </details>
                </div>
            }
        </div>
        <!-- Group Detalis -->
        <div class="col-md-7">
            @if (selectedGroupDto != null)
            {
                @if (displayGroupProducts == false)
                {
                    <!-- Form Group -->
                    <div class="m-4">
                        <p class="header2Font">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.InputPurchasedtQuantity))</p>
                        <p>Licenser kan redigeres til d.20 marts.</p>
                    </div>
                    <div class="m-3 d-flex">
                        <div class="card-body p-1 ">
                            <EditForm Model="selectedGroupDto" OnValidSubmit="UpdateGroupAsync" class="">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="row d-flex justify-content-center">
                                    <div class="form-group col-md-10 d-flex justify-content-between">
                                        <div class="form-group col-md-6">
                                            <label for="GroupName">Group Name:</label>
                                            <InputText id="GroupName" @bind-Value="selectedGroupDto.GroupName" class="form-control inputGroupName" />
                                            <ValidationMessage For="@(() => selectedGroupDto.GroupName)" />
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="EANName">EAN:</label>
                                            <input type="text" id="EANName" value="@selectedGroupDto.EAN" class="form-control inputGroupEAN bg-white" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                                        <button type="submit"
                                                class="btn btn-outline-success mx-4">


                                            <i class="fa fa-save"></i>
                                        </button>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                        <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                            <button type="submit" class="btn btn-outline-danger "><i class="fa fa-trash"></i></button>
                        </div>
                    </div>

                    <!-- Group Products -->
                    <h5 class="mt-4 p-2 headerFont">Selected Licenses</h5>
                    <!-- GroupProduct Table -->
                    <div class="m-4">
                        <div class="row mx-2 ">
                            <div class="col-sm-11 d-flex justify-content-sm-between align-baseline headerFont bg-light p-2 ">
                                <div class="col-sm-3 ">
                                    Type
                                </div>
                                <div class="col-sm-3 ">
                                    Cost
                                </div>
                                <div class="col-sm-3 ">
                                    Remaining
                                </div>
                                <div class="col-sm-3 ">
                                    Quantity
                                </div>
                            </div>

                            <div class="col-sm-1">
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (var product in selectedGroupDto.GroupProductsDto)
                                        {
                                            <tr class="d-flex justify-content-sm-between align-baseline ">
                                                <td>@product.ProductName</td>
                                                <td>@product.ProductPrice</td>
                                                <td>@product.AddedQty</td>
                                                <td>
                                                    <input type="number" class="inputNumber"
                                                    @key="product.PurchasedProductId"
                                                    @bind-value="@product.InputProductQuantity"
                                                    @oninput="() => UpdateGroupProductQuantities(product)" />
                                                </td>
                                                <td>
                                                    <button class="btn btn-outline-danger" @onclick="()=>RemoveProduct(product)"><i class="fa fa-trash"></i></button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>

                                    @*<tr>
                            <td colspan="4">
                            </td>
                            <td class="d-flex justify-content-end">
                            Total:@selectedGroupDto.CalculateTotalPrice().ToString("c2")/(@selectedGroupDto.CalculateTotalQuantity())
                            </td>
                            <td>
                            </td>
                            </tr>*@

                                </table>

                            </div>
                        </div>
                    </div>


                    <!-- Purchased Products Table -->
                    <h5 class="mt-4 p-2 headerFont">Choose from licenses</h5>
                    <div class="m-4">
                        <div class="row mx-2 ">
                            <div class="col-sm-11 d-flex justify-content-sm-between align-baseline headerFont fs-7 bg-light p-2">
                                <div class="col-sm-3 ">
                                    Type
                                </div>
                                <div class="col-sm-3 ">
                                    Cost
                                </div>
                                <div class="col-sm-3 ">
                                    Remaining
                                </div>
                                <div class="col-sm-3 ">
                                    Quantity
                                </div>
                            </div>

                            <div class="col-sm-1">
                            </div>
                        </div>

                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (var Purchasedproduct in purchasedProductDtos)
                                        {
                                            <tr class="d-flex justify-content-sm-between align-baseline ">
                                                <td>@Purchasedproduct.ProductName</td>
                                                <td>@Purchasedproduct.ProductPrice</td>
                                                <td>@Purchasedproduct.PurchasedQty</td>
                                                <td>
                                                    <input @key="Purchasedproduct.PurchasedProductId" class="inputNumber"
                                                           type="number"
                                                           min="0"
                                                    @bind-value="@Purchasedproduct.InputPurchasedtQuantity" />
                                                </td>
                                                <td></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <div class="d-flex justify-content-end">
                                    <button class=" addBtn" @onclick="()=>UpdatePurchasedQuantities(selectedGroupDto)">Add</button>
                                </div>
                            </div>
                            <div class="d-flex justify-content-end m-2">
                                <button class=" btnUndo mx-3 rounded-pill" @onclick="undoChanges">Disgard</button>
                                <button class=" btnSave">Save</button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card m-2 p-2 ">
                        <!-- Purchased Products Table -->
                        <h4 class="mt-2 headerFont">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.PurchasedQty))</h4>
                        <h5 class="header2Font">  Licenser kan redigeres til d.@DateTime.UtcNow.ToString("dd MM yyyy"). </h5>
                        <table class="table">
                            <thead class="bg-black">
                                <tr class="headerFont ">
                                    <th>Type</th>
                                    <th>Cost</th>
                                    <th>Remaining</th>
                                </tr>
                            </thead>
                            <tbody class="">
                                @foreach (var Purchasedproduct in purchasedProductDtos)
                                {
                                    <tr>
                                        <td>@Purchasedproduct.ProductName</td>
                                        <td>@Purchasedproduct.ProductPrice</td>
                                        <td>@Purchasedproduct.PurchasedQty</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="d-flex justify-content-end ">
                            <button class="btnAddGroup rounded-pill" @onclick="()=>CreateGroup()">Create Group</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div>
    @if (ProductChangesDto != null && ProductChangesDto.Any())
    {
        <table class="table">
            @foreach (var group in ProductChangesDto.GroupBy(p => p.ProductId))
            {
                <thead class="bg-black">
                    <tr class="headerFont">
                        <th>Product Id: @group.Key</th>
                    </tr>
                </thead>
                <thead class="bg-black">
                    <tr class="headerFont">

                        <th>CustomerId</th>
                        <th>GroupId</th>
                        <th>UpdatedGroupProductAddedQty</th>
                        <th>UpdatedPurchasedQty</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in group)
                    {
                        <tr>
                            <td>@item.CustomerId</td>
                            <td>@item.GroupId</td>
                            <td>@item.UpdatedGroupProductAddedQty</td>
                            <td>@item.UpdatedPurchasedQty</td>
                        </tr>
                    }
                </tbody>
            }
        </table>
    }
    else
    {
        <p>No data available.</p>
    }
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task undoChanges()
    {
        await LoadData();
        ShowGroupDetails(selectedGroup.GroupId);
    }
    #region Param
    [Parameter]
    public int customerId { get; set; }
    private Customer? _customer = new Customer();
    private Group selectedGroup = new Group();
    private IEnumerable<Group> customerGroups = new List<Group>();
    private IEnumerable<PurchasedProduct> _PurchasedProducts = new List<PurchasedProduct>();
    private bool displayGroupProducts = true; // Flag to control GroupProduct Table display
    #endregion



    #region Dto Interacts Mehtods And Param

    private GroupDto? selectedGroupDto = new GroupDto();
    private IEnumerable<GroupDto> customerGroupsDto = new List<GroupDto>();
    private List<GroupProductDto>? groupProductDtos = new List<GroupProductDto>();
    private List<PurchasedProductDto>? purchasedProductDtos = new List<PurchasedProductDto>();
    private List<ProductChangeDto>? ProductChangesDto = new List<ProductChangeDto>();

    private async Task LoadData()
    {
        // Load customer data, groups, and purchased products
        _customer = await _IGetCustomerWithGroupsAndProductsUC.ExecuteAsync(customerId);
        if (_customer != null)
        {
            // Load and map customer groups
            LoadCustomerGroups();

            // Load and map purchased products
            LoadPurchasedProducts();
        }
    }
    private void LoadCustomerGroups()
    {
        customerGroups = _customer.Groups.ToList();
        if (customerGroups != null)
        {
            customerGroupsDto = customerGroups.Select(group => MapToGroupDto(group)).ToList();
        }
    }
    private async void LoadPurchasedProducts()
    {
        _PurchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);
        if (_PurchasedProducts != null)
        {
            purchasedProductDtos = _PurchasedProducts.Select(p => MapToPurchasedProductDto(p)).ToList();
        }
    }
    private GroupDto MapToGroupDto(Group group)
    {
        if (group == null)
        {
            return null;
        }

        return new GroupDto
            {
                GroupId = group.GroupId,
                GroupName = group.GroupName,
                EAN = group.EAN,
                CustomerId = customerId, // You may need to set this based on your requirements
                GroupProductsDto = group.GroupProducts.Select(gp => MapToGroupProductDto(gp)).ToList()
            };
    }
    private GroupProductDto MapToGroupProductDto(GroupProduct groupProduct)
    {
        if (groupProduct == null)
        {
            return null;
        }

        return new GroupProductDto
            {
                GroupId = groupProduct.GroupId,
                PurchasedProductId = groupProduct.PurchasedProductId,
                ProductName = groupProduct.PurchasedProduct?.ProductName,
                ProductPrice = groupProduct.PurchasedProduct?.ProductPrice ?? 0.00M,
                AddedQty = groupProduct.AddedQuantity,
                InputProductQuantity = 0 // Set the default value as needed
            };
    }
    private PurchasedProductDto MapToPurchasedProductDto(PurchasedProduct purchasedProduct)
    {
        if (purchasedProduct == null)
        {
            return null;
        }

        return new PurchasedProductDto
            {
                PurchasedProductId = purchasedProduct.ProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                PurchasedQty = purchasedProduct.PurchasedQty,
                CustomerId = customerId, // You may need to set this based on your requirements
                InputPurchasedtQuantity = 0 // Set the default value as needed
            };
    }
    #endregion

    #region Manpulate
    private async Task UpdateGroupAsync()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil opdaterer gruppen\nAarhus Kommune {selectedGroupDto.GroupName}?");

        if (confirmed)
        {
            var result = await _IUpdateGroupNameUC.ExcecuteAsync(selectedGroupDto.GroupId, selectedGroupDto.GroupName);
            if (result)
            {
                // Update was successful, show a success notification
                await JSRuntime.InvokeVoidAsync("showSweetAlertSuccess", "Update Successful", "The group name has been updated successfully.");
            }
        }
        else
        {
            // The user clicked "Cancel," do nothing or show a message.
        }
    }
    #endregion

    #region User Interacting
    private void RemoveProduct(GroupProductDto product)
    {

        // Find the corresponding PurchasedProduct by ProductId
        PurchasedProductDto purchasedProduct = purchasedProductDtos.FirstOrDefault(p => p.PurchasedProductId == product.PurchasedProductId);

        if (purchasedProduct != null && purchasedProduct.PurchasedProductId>0)
        {
            // Add the removed quantity back to PurchasedQty
            purchasedProduct.PurchasedQty += product.AddedQty;
        }

        // Remove the product from the list
        selectedGroupDto.GroupProductsDto.Remove(product);

        // Set AddedQty to 0 for the removed product
        product.AddedQty = 0;
    }
    private void UpdateGroupProductQuantities(GroupProductDto groupProduct)
    {
        // Find the corresponding PurchasedProductDto using PurchasedProductId
        PurchasedProductDto purchasedProduct = purchasedProductDtos.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);

        if (purchasedProduct != null && purchasedProduct.PurchasedQty > 0)
        {
            int inputQuantity = groupProduct.InputProductQuantity;

            if (IsValidInputQuantity(inputQuantity, purchasedProduct.PurchasedQty))
            {
                UpdateQuantities(groupProduct, purchasedProduct, inputQuantity);
                TrackChange(groupProduct.GroupId, purchasedProduct.PurchasedProductId, groupProduct.AddedQty, purchasedProduct.PurchasedQty);
            }
            else
            {
                ShowValidationError($"Invalid input quantity!\nYou've reached the total availability for License:\n{purchasedProduct.ProductName} which is now: {purchasedProduct.PurchasedQty}\nPlease check the amount.");
            }

            // Reset the input quantity
            groupProduct.InputProductQuantity = 0;

            // Trigger a UI update to reflect the changes in the table
            StateHasChanged();
        }
    }
    private void UpdatePurchasedQuantities(GroupDto selectedGroup)
    {
        foreach (PurchasedProductDto purchasedProduct in purchasedProductDtos)
        {
            if (purchasedProduct.PurchasedQty <= 0)
            {
                // Skip processing if the purchasedProduct quantity is not greater than zero
                continue;
            }
            // Retrieve the corresponding product in the GroupProductsDto list
            GroupProductDto groupProductToUpdate = selectedGroup.GroupProductsDto
             .FirstOrDefault(gp => gp.PurchasedProductId == purchasedProduct.PurchasedProductId);

            if (groupProductToUpdate != null && groupProductToUpdate.AddedQty <= purchasedProduct.PurchasedQty)
            {
                int inputQuantity = purchasedProduct.InputPurchasedtQuantity;

                if (IsValidInputQuantity(inputQuantity, purchasedProduct.PurchasedQty))
                {
                    UpdateQuantities(groupProductToUpdate, purchasedProduct, inputQuantity);
                    TrackChange(selectedGroup.GroupId, purchasedProduct.PurchasedProductId, groupProductToUpdate.AddedQty, purchasedProduct.PurchasedQty);
                }
                else
                {
                    ShowValidationError($"Invalid input quantity!\nYou've reached the total availability for License:\n{purchasedProduct.ProductName} which is now: {purchasedProduct.PurchasedQty}\nPlease check the amount.");
                }
            }
            else
            {
                CreateNewGroupProduct(selectedGroup, purchasedProduct);
            }
        }

        StateHasChanged();
    }
    #endregion

    #region Helper Methods

    private bool IsValidInputQuantity(int inputQuantity, int purchasedQty)
    {
        return inputQuantity > 0 && inputQuantity <= purchasedQty;
    }

    private void UpdateQuantities(GroupProductDto groupProduct, PurchasedProductDto purchasedProduct, int inputQuantity)
    {
        purchasedProduct.PurchasedQty -= inputQuantity;
        groupProduct.AddedQty += inputQuantity;
        purchasedProduct.InputPurchasedtQuantity = 0;
    }

    private void TrackChange(int groupId, int productId, int updatedAddedQty, int updatedPurchasedQty)
    {
        ProductChangeDto changeDto = new ProductChangeDto
            {
                CustomerId = customerId,
                GroupId = groupId,
                ProductId = productId,
                UpdatedGroupProductAddedQty = updatedAddedQty,
                UpdatedPurchasedQty = updatedPurchasedQty
            };

        ProductChangesDto.Add(changeDto);
    }

    private void CreateNewGroupProduct(GroupDto selectedGroup, PurchasedProductDto purchasedProduct)
    {
        GroupProductDto newGroupProduct = new GroupProductDto
            {
                GroupId = selectedGroup.GroupId,
                PurchasedProductId = purchasedProduct.PurchasedProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                AddedQty = purchasedProduct.InputPurchasedtQuantity,
                InputProductQuantity = 0
            };

        selectedGroup.GroupProductsDto.Add(newGroupProduct);
        TrackChange(selectedGroup.GroupId, purchasedProduct.PurchasedProductId, purchasedProduct.InputPurchasedtQuantity, purchasedProduct.PurchasedQty);
    }
    #endregion

    #region Methods
    private void ShowGroupDetails(int groupId)
    {
        if (groupId > 0)
        {
            // Find the selected group and set it as the selectedGroup
            selectedGroupDto = customerGroupsDto.FirstOrDefault(g => g.GroupId == groupId);
            ProductChangesDto = ProductChangesDto.Where(c => c.CustomerId == customerId && c.GroupId == groupId).ToList();
            displayGroupProducts = false; // Hide GroupProduct Table
        }
        else
        {
            // Clear the selectedGroup and show the GroupProduct Table
            selectedGroupDto = new GroupDto();
            displayGroupProducts = true;
        }
    }
    #endregion

    private void ShowValidationError(string message)
    {
        JSRuntime.InvokeVoidAsync("showValidationError", message);
    }

    private void CreateGroup()
    {
        // Implement the logic to create a group here
        // For example, you can navigate to the CreateNewGroupPage with a route parameter
        NavigationManager.NavigateTo($"/create-group/{customerId}", forceLoad: true);
    }

    #region Dto Classes
    public class GroupDto
    {
        public int GroupId { get; set; }
        public string GroupName { get; set; }
        public string EAN { get; set; }
        public int CustomerId { get; set; }
        public List<GroupProductDto> GroupProductsDto { get; set; } = new List<GroupProductDto>();

        public GroupDto()
        {
            // Set default values in the constructor
            CustomerId = 0;
            GroupProductsDto = new List<GroupProductDto>();
        }
    }

    public class GroupProductDto
    {
        public int GroupId { get; set; }
        public int PurchasedProductId { get; set; }
        public string ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int AddedQty { get; set; }
        public int InputProductQuantity { get; set; }

        public GroupProductDto()
        {
            // Set default values in the constructor
            AddedQty = 0;
            InputProductQuantity = 0;
        }
    }

    public class PurchasedProductDto
    {
        public int PurchasedProductId { get; set; }
        public string ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int PurchasedQty { get; set; }
        public int CustomerId { get; set; }
        public int InputPurchasedtQuantity { get; set; }

        public PurchasedProductDto()
        {
            // Set default values in the constructor
            PurchasedQty = 0;
            InputPurchasedtQuantity = 0;
        }
    }

    public class ProductChangeDto
    {
        public int CustomerId { get; set; }
        public int GroupId { get; set; }
        public int ProductId { get; set; }
        public int UpdatedGroupProductAddedQty { get; set; }
        public int UpdatedPurchasedQty { get; set; }
    }
    #endregion

}

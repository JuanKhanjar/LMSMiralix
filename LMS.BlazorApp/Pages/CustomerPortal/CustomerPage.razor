@page "/customer/"
@page "/customer/{customerId:int}"

@inject IGetCustomerWithGroupsAndProductsUC _IGetCustomerWithGroupsAndProductsUC
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC
@inject IUpdateGroupNameUC _IUpdateGroupNameUC
@inject IDeleteGroupWithProductsUC _IDeleteGroupWithProductsUC
@inject IAddPurchasedQtysToGroupProductsUC _IAddPurchasedQtysToGroupProductsUC
@inject NavigationManager NavigationManager
@inject NotificationService _notificationService
@inject IJSRuntime JSRuntime

<div class="row">
    <!-- Left side 30% -->
    <div class="col-md-4 lefSideLayOut ">
        <!-- Section Main Headers -->
        <div class="d-flex justify-content-between m-4 GroupMainHeaderFont">
            <p>Grupper (@customerGroupsDto.Count())</p>
            <div data-toggle="tooltip" data-placement="top" title="Her er hvor mange afdelinger du har">
                <i class="bi bi-question-circle-fill"></i>
            </div>
        </div>
        <!-- End of Section Main Headers -->
        <!-- Group 1 -->
        @if (customerGroups != null)
        {
            <!-- Panels -->
            <div class="panel-group" id="accordion">
                @foreach (Group group in customerGroups)
                {
                    <div class="groupLayOut ">
                        <!-- Group Overview -->
                        <div data-toggle="collapse" data-parent="#accordion" href="#collapse_@(group.GroupId)" class="clickable-section">
                            <div class="row mb-3">
                                <div class="col-5">@_customer.CustomerName</div>
                                <div class="col-2">@group.GroupName</div>
                                <div class="col-4 groupEan">@group.EAN</div>
                                <div class="col-1 toggleIcon">
                                    <i class="bi bi-chevron-down" id="collapseIcon"></i>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    Total&nbsp;&nbsp;&nbsp;<span class="antalGroup">@group.GetTotalPriceForAgroup().ToString("c2")</span>&nbsp;/<span class="antalGroupCount">&nbsp;@group.GetTotalQuantityForAgroup() licenser</span>
                                </div>
                            </div>
                        </div>

                        <!-- End of Group Overview -->
                        <!-- Collaps section Group Products -->
                        <div id="collapse_@(group.GroupId)" class="panel-collapse container mt-3 in">
                            <div class="panel-body m-2 ">
                                <!-- Group Products Item Headers -->
                                <div class="row GroupProductHeader Headers d-flex justify-content-between">
                                    <div class="col-6">Type</div>
                                    <div class="col-3">Pris</div>
                                    <div class="col-3">Antal</div>
                                </div>
                                <!-- End of Group Products Item Headers -->
                                <!-- Group Products Item -->
                                @foreach (GroupProduct product in group.GroupProducts.Where(gp => gp.AddedQuantity > 0))
                                {
                                    <div class="row mt-3">
                                        <div class="col">
                                            <table class="table table-borderless">
                                                <tbody>
                                                    <tr class="ProductItemText">
                                                        <td class="col-6">@product.PurchasedProduct.ProductName</td>
                                                        <td class="col-3 ProductItemNumber">@product.PurchasedProduct.ProductPrice.ToString("c2")</td>
                                                        <td class="col-3 ProductItemNumber">@product.AddedQuantity</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                }
                                <!-- End of Group Products Item -->
                                <!-- Actions for Group Products Item -->
                                <div class="row mt-3">
                                    <div class="col d-flex justify-content-between m-1">
                                        <button class="btn Group-font-btn" @onclick="(()=>ShowGroupDetails(group.GroupId))">Redigere</button>
                                        <button class="btn" title="Delete this item" @onclick="(()=>DeleteGroupWithAllItsGP(group.GroupId))"><i class="bi bi-trash text-danger "></i></button>
                                        <!--<div class="btn"><i class="bi bi-pencil-square text-secondary"></i></div>-->
                                    </div>
                                </div>
                                <!-- End Of Actions for Group Products Item -->
                            </div>
                        </div>
                        <!-- End of Collaps section Group Products -->
                    </div>
                }
            </div>
            <!-- End of Panels -->
        }

        <!-- End Of Group 1 -->
        <!-- End of Group Item -->
    </div>
    <!-- Right side 70% -->
    <div class="col-md-8 rightSideLayOut ">
        @if (selectedGroupDto != null)
        {
            @if (displayGroupProducts == false)
            {
                <div class="m-4 GroupMainHeaderFont d-flex justify-content-between">
                    <p>Licenser til tildeling (@purchasedProductDtos?.Sum(p=>p.PurchasedQty))</p>
                    <div data-toggle="tooltip" data-placement="top" title="Her er hvor mange afdelinger du har" class="">
                        <i class="bi bi-question-circle-fill"></i>
                    </div>
                </div>
                <div class="m-4 GroupSecondaryHeaderFont">
                    <p>
                        <span><i class="bi bi-info-circle-fill text-primary"></i></span>
                        kan redigeres til d.@DateTime.Now.ToString("dd MM yyyy").
                    </p>
                </div>

                <!-- Edit Group Headers  -->
                <div class="row mb-2 ml-0">
                    <div class="col-10 Headers d-flex justify-content-between">
                        <div class="col-6">Gruppenavn</div>
                        <div class="col-4">EAN number</div>
                    </div>
                </div>
                <!-- Edit Group Form  -->
                <div class="row m-0">
                    <div class="col-md-12 d-flex justify-content-between">
                        <div class="col-md-10 d-flex justify-content-between">
                            <form>
                                <div class="col-md-6">

                                    <input type="text"
                                           class="groupNameInput"
                                           name="groupName"
                                           placeholder="Sundhed" />
                                </div>
                            </form>
                            <div class="col-md-4">
                                <input type="text"
                                       class="groupEanInput"
                                       name="eanNumber"
                                       placeholder="EAN 123-23"
                                       disabled />
                            </div>
                        </div>

                        <div class="col-md-2 d-flex justify-content-center">
                            <button class="btn" onclick="document.getElementById('id01').style.display='block'">
                                <i class="bi bi-trash text-danger Group-icon-styled"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <!--End of  Edit Group Form  -->

                <div class="row m-4 GroupSecondaryHeaderFont">
                    <p>Udvalgte licenser</p>
                </div>

                <!-- Customer Purchased Products will rendered here -->
                <!-- Purchased Products Item Headers  -->
                <div class="row">
                    <div class="col-10 GroupProductHeader Headers d-flex justify-content-between">
                        <div class="col-4">Type</div>
                        <div class="col-2">Pris</div>
                        <div class="col-2">Restende</div>
                        <div class="col-2">Antal</div>
                    </div>
                    <!-- End of Purchased Products Item Headers  -->
                    <!-- Purchased Products Item  -->
                    <div class="row m-0">
                        <div class="col-12">
                            <table class="table table-borderless">
                                <tbody>
                                    @foreach (GroupProductDto groupProduct in selectedGroupDto.GroupProductsDto)
                                    {
                                        int PP = groupProduct.GetPPAvailability(purchasedProductDtos ?? new List<PurchasedProductDto>(), groupProduct.PurchasedProductId);

                                        <tr class="ProductItemText">
                                            <td class="col-4">@groupProduct.ProductName</td>
                                            <td class="col-2 ProductItemNumber">@groupProduct.ProductPrice.ToString("c2")</td>
                                            <td class="col-2 ProductItemNumber">@($"{groupProduct.AddedQty + groupProduct.InputProductQuantity}")</td>
                                            <td class="col-2">
                                                <input type="number"
                                                       class="inputNumber"
                                                @key="groupProduct.PurchasedProductId"
                                                       min="0"
                                                       max="@PP"
                                                       id="@($"inputNumber{groupProduct.PurchasedProductId}")"
                                                @bind="groupProduct.InputProductQuantity"
                                                @oninput="HandleInputProductQuantityChanged" />
                                            </td>
                                            <td class=" col-2" style="border: 0; text-align: center">
                                                <div>
                                                    <button class="btn" @onclick="(()=>RemoveProduct(groupProduct))">
                                                        <i class="bi bi-trash text-danger Group-icon-styled"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                                <tfoot>
                                    <tr class="row">
                                        <td class="col-10 text-end">
                                            <span class="ComponentMainHeaderFont">Total</span> &nbsp;&nbsp;&nbsp;<span class="antalGroup">2900 kr</span>&nbsp;/<span class="antalGroupCount">&nbsp;26 licenser</span>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>

                        </div>
                    </div>
                </div>
                <!-- End of Purached Products Items  -->

                <div class="row m-4 GroupSecondaryHeaderFont">
                    <p>Vælg mellem licenser</p>
                </div>
                <!-- Customer Purchased Products will rendered here -->
                <!-- Purchased Products Items -->
                <div class="row">
                    <div class=" col-10 GroupProductHeader Headers d-flex justify-content-between">
                        <div class="col-4">Type</div>
                        <div class="col-2">Pris</div>
                        <div class="col-2">Restende</div>
                        <div class="col-2">Antal</div>
                    </div>
                    <!-- End of Purchased Products Items Headers  -->
                    <!-- Purchased Products Items  -->
                    <div class="row">
                        <div class="col-12">
                            @if (purchasedProductDtos != null && purchasedProductDtos.Any())
                            {
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (PurchasedProductDto Purchasedproduct in purchasedProductDtos)
                                        {
                                            int GP = Purchasedproduct.GetGPAvailability(selectedGroupDto.GroupProductsDto, Purchasedproduct.PurchasedProductId);
                                            <tr class="ProductItemText">

                                                <td class="col-4">@Purchasedproduct.ProductName</td>
                                                <td class="col-2 ProductItemNumber">@Purchasedproduct.ProductPrice.ToString("c2")</td>
                                                <td class="col-2 ProductItemNumber">
                                                    @($"{Purchasedproduct.PurchasedQty - (GP + Purchasedproduct.InputPurchasedtQuantity)}")
                                                </td>
                                                <td class="col-2">
                                                    <input type="number"
                                                           class="inputNumber"
                                                           min="0"
                                                           max="@(Purchasedproduct.PurchasedQty - GP)"
                                                           id="@($"inputNumber{Purchasedproduct.PurchasedProductId}")"
                                                    @bind="Purchasedproduct.InputPurchasedtQuantity" />
                                                </td>
                                                <td class="col-12"></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <table class="table table-borderless">
                                    <tbody>
                                        <tr class="">
                                            <td> No Purchased Product ...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            }
                             
                        </div>
                        <div class="col-10">
                            <div class="text-end">
                                <button class="btn AddBtn" @onclick="()=>AddPurchasedQuantitiesToGroupProduct(selectedGroupDto)">tilføje</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End of Purached Products Items  -->
                <!-- Actions  -->
                <div class="row m-5 d-flex justify-content-end">
                    <button class="btn UndoBtn"
                            style="margin-right: 20px">
                        annullere
                    </button>
                    <button class="btn SaveBtn">gem</button>
                </div>
                <!-- End of Actions  -->
            }
            else
            {
                <div class="m-4 GroupMainHeaderFont d-flex justify-content-between">
                    <p>Licenser til tildeling (@purchasedProductDtos?.Sum(p=>p.PurchasedQty))</p>
                    <div data-toggle="tooltip" data-placement="top" title="Her er hvor mange afdelinger du har" class="">
                        <i class="bi bi-question-circle-fill"></i>
                    </div>
                </div>
                <div class="m-4 GroupSecondaryHeaderFont">
                    <p>
                        <span><i class="bi bi-info-circle-fill text-primary"></i></span>
                        kan redigeres til d.@DateTime.Now.ToString("dd MM yyyy").
                    </p>
                </div>
                <!-- Customer Purchased Products will rendered here -->
                <div class="groupLayOut m-0">
                    <!-- Purchased Products Item Headers  -->
                    <div class="row GroupProductHeader Headers d-flex justify-content-between m-0">
                        <!-- First column for Type -->
                        <div class="col-6">Type</div>
                        <!-- Second column for Pris -->
                        <div class="col-3">Pris</div>
                        <!-- Third column for Antal -->
                        <div class="col-3">Antal</div>
                    </div>
                    <!-- End of Purchased Products Item Headers  -->
                    <!-- Purchased Products Item  -->
                    <div class="row mt-3">
                        <div class="col">
                            <table class="table">
                                <tbody>
                                    @foreach (var item in purchasedProductDtos)
                                    {
                                        <tr class="ProductItem">
                                            <td class="col-6">@item.ProductName</td>
                                            <td class="col-3">@item.ProductPrice.ToString("c2")</td>
                                            <td class="col-3">@item.PurchasedQty</td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!-- End of Purached Products Item  -->
                </div>
                <div class="m-4 text-end">
                    <div class="btn rounded-pill px-5" style="background: rgba(39, 61, 32, 1);color: rgba(255, 255, 255, 1);">Opret gruppe</div>
                </div>
                <!-- Customer Purchased Products -->
            }
        }

    </div>
</div>


<Dialog Title="@( $"Ændringsoversigt: Kunde {_customer?.CustomerName?? string.Empty} - Gruppe {selectedGroupDto?.GroupName ?? string.Empty }")"
        ConfirmButtonText="OK"
        CancelButtonText="Annullere"
@ref="dialog" SaveChnges="()=>SaveToDb(changedGPDtos)">
    <ChildContent>
        <ChangeSummary CustomerId="customerId"
                       SelectedGroupDto="selectedGroupDto"
                       ChangedGPDtos="changedGPDtos" />
    </ChildContent>

</Dialog>

<CreateGroupDialog CancelButtonText="Luk"
                   Title="Opret en ny gruppe" @ref="createGroupDialog">
    <ChildContent>
        <CreateNewGroupPage customerId="customerId" />
    </ChildContent>
</CreateGroupDialog>

<!-- Modal -->
<div id="id01" class="modal">
    <span onclick="document.getElementById('id01').style.display='none'" class="close" title="Close Modal">×</span>
    <form class="modal-content">
        <div class="Modalcontainer">
            <div class="row text-center">
                <h1>Slet gruppe</h1>
            </div>
            <div class="row text-center">
                <p>Er du sikker på at du vil slette gruppen Aarhus Kommune Sundhed?</p>
            </div>

            <div class="d-flex justify-content-center">
                <button onclick="document.getElementById('id01').style.display='none'" class="btn cancelbtn">Annullere</button>
                <button class="btn deletebtn" id="123">Slet Gruppe</button>
            </div>
        </div>
    </form>
</div>
<!-- End of Modal -->
@code {
    private string OldGroupName { get; set; } = string.Empty;
    private void HandleInputProductQuantityChanged()
    {
        // Call StateHasChanged if needed to re-render the component
        StateHasChanged();
    }
    private CreateGroupDialog createGroupDialog { get; set; } = new CreateGroupDialog();
    private Dialog dialog { get; set; } = new Dialog();
    private void ShowDialog()
    {
        dialog.ShowDialog();
    }
    private List<ChangesDto> changedGPDtos = new List<ChangesDto>();
    private List<UpdateQuantityVM> updateQuantityVmList = new List<UpdateQuantityVM>();

    private void showChangesToUpdate(GroupDto? selectedGroupDto, List<PurchasedProductDto> purchasedProductDtos)
    {
        changedGPDtos.Clear();
        if (purchasedProductDtos != null)
        {
            foreach (PurchasedProductDto PPProduct in purchasedProductDtos)
            {
                // Find the corresponding PP in the purchasedProductDtos by some identifier (e.g., ID or Name)
                ChangesDto ch = new ChangesDto();
                var GP = selectedGroupDto.GroupProductsDto.FirstOrDefault(gp => gp.PurchasedProductId == PPProduct.PurchasedProductId);
                if (GP != null && GP.InputProductQuantity > 0)
                {
                    ch.CustomerId = customerId;
                    ch.GroupId = selectedGroupDto.GroupId;
                    ch.LicenseId = GP.PurchasedProductId;
                    ch.Name = GP.ProductName;
                    ch.Cost = PPProduct.ProductPrice;
                    ch.GPChangeQuantity = GP.InputProductQuantity;
                    ch.PPChangeQuantity = (PPProduct.PurchasedQty - GP.InputProductQuantity);

                }
                else
                {
                    // Corresponding GP not found, use values from PPProduct
                    ch.CustomerId = customerId;
                    ch.GroupId = selectedGroupDto.GroupId;
                    ch.LicenseId = PPProduct.PurchasedProductId;
                    ch.Name = PPProduct.ProductName;
                    ch.Cost = PPProduct.ProductPrice;
                    ch.GPChangeQuantity = 0;
                    ch.PPChangeQuantity = PPProduct.PurchasedQty;
                }
                changedGPDtos.Add(ch);
            }
            ShowDialog();
        }
    }
    private async Task SaveToDb(List<ChangesDto> changedGPDtos)
    {
        if (selectedGroupDto.GroupName.Trim().ToLower() != OldGroupName.ToLower().Trim())
        {
            await UpdateGroupNameAsync();
        }

        updateQuantityVmList = changedGPDtos.Select(dto => MapToUpdateQuantityVM(dto)).ToList();
        //call save
        if (selectedGroupDto != null)
        {
            bool result = await _IAddPurchasedQtysToGroupProductsUC.ExecuteAsync(selectedGroupDto.GroupId, updateQuantityVmList);
            if (result)
            {
                // Update was successful, show a success notification
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Mængder opdateret med succes", "Gruppens mængder er blevet opdateret med succes.", "success");
                await LoadData();
                ShowGroupDetails(selectedGroup.GroupId);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Opdatering fejlede", "Gruppens mængder er ikke blevet opdateret.", "error");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task undoChanges()
    {
        await LoadData();
        ShowGroupDetails(selectedGroup.GroupId);
    }

    #region Param
    [Parameter]
    public int customerId { get; set; }
    private Customer? _customer = new Customer();
    private Group selectedGroup = new Group();
    private IEnumerable<Group> customerGroups = new List<Group>();
    private IEnumerable<PurchasedProduct> _PurchasedProducts = new List<PurchasedProduct>();
    private bool displayGroupProducts = true; // Flag to control GroupProduct Table display
    #endregion

    #region Dto Interacts Mehtods And Param

    private GroupDto? selectedGroupDto = new GroupDto();
    private IEnumerable<GroupDto> customerGroupsDto = new List<GroupDto>();
    private List<GroupProductDto>? groupProductDtos = new List<GroupProductDto>();
    private List<PurchasedProductDto>? purchasedProductDtos = new List<PurchasedProductDto>();

    private async Task LoadData()
    {
        _customer = await _IGetCustomerWithGroupsAndProductsUC.ExecuteAsync(customerId);
        if (_customer != null)
        {
            // Load and map customer groups
            await LoadCustomerGroups();

            // Load and map purchased products
            await LoadPurchasedProducts();
        }
    }
    private async Task LoadCustomerGroups()
    {
        customerGroups = await Task.Run(() => _customer.Groups.ToList());
        if (customerGroups != null && customerGroups.Any())
        {
            customerGroupsDto = customerGroups.Select(group => MapToGroupDto(group));
        }
    }
    private async Task LoadPurchasedProducts()
    {
        _PurchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);
        if (_PurchasedProducts != null)
        {
            purchasedProductDtos = _PurchasedProducts.Select(PP => MapToPurchasedProductDto(PP)).ToList();
        }
    }


    #endregion

    #region Manpulate
    private async Task UpdateGroupNameAsync()
    {
        bool confirmed = await _notificationService.ShowConfirmation($"Du er ved at ændre gruppenavnet til<strong> {selectedGroupDto.GroupName}</strong>, er du sikker? ", true);
        //bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil opdaterer gruppen\nAarhus Kommune {selectedGroupDto.GroupName}");
        if (confirmed)
        {
            var result = await _IUpdateGroupNameUC.ExcecuteAsync(selectedGroupDto.GroupId, selectedGroupDto.GroupName);
            if (result)
            {
                // Update was successful, show a success notification
                await _notificationService.ShowSuccessNotification("Update Successful", "The group name has been updated successfully.");
                //await JSRuntime.InvokeVoidAsync("Swal.fire", "Update Successful", "The group name has been updated successfully.", "success");
            }
            else
            {
                await _notificationService.ShowErrorNotification("Update failed", "The group name has not  updated successfully.");
                //await JSRuntime.InvokeVoidAsync("Swal.fire", "Update failed", "The group name has not  updated successfully.", "error");
            }
        }
    }
    #endregion

    #region User Interacting
    private void RemoveProduct(GroupProductDto groupProduct)
    {
        PurchasedProductDto? PP = purchasedProductDtos?.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);
        if (PP != null)
        {

            // Add the removed quantity back to PurchasedQty
            PP.PurchasedQty += groupProduct.AddedQty;
            PP.InputPurchasedtQuantity = 0;
            // Remove the product from the list
            selectedGroupDto?.GroupProductsDto.Remove(groupProduct);
        }
        else
        {
            PurchasedProductDto newPP = new PurchasedProductDto()
                {
                    PurchasedProductId = groupProduct.PurchasedProductId,
                    ProductName = groupProduct.ProductName,
                    ProductPrice = groupProduct.ProductPrice,
                    PurchasedQty = groupProduct.AddedQty
                };
            if (purchasedProductDtos != null)
            {
                selectedGroupDto?.GroupProductsDto.Remove(groupProduct);
                purchasedProductDtos.Add(newPP);
            }
        }
        StateHasChanged();
    }

    private void AddPurchasedQuantitiesToGroupProduct(GroupDto selectedGroup)
    {
        if (purchasedProductDtos == null || !purchasedProductDtos.Any())
        {
            return;
        }

        foreach (var purchasedProduct in purchasedProductDtos.Where(pp => pp.InputPurchasedtQuantity > 0))
        {
            var groupProductToUpdate = selectedGroup.GroupProductsDto?
                .FirstOrDefault(gp => gp.PurchasedProductId == purchasedProduct.PurchasedProductId);

            if (groupProductToUpdate != null)
            {
                int newInputQuantity = groupProductToUpdate.InputProductQuantity + purchasedProduct.InputPurchasedtQuantity;

                if (newInputQuantity <= purchasedProduct.PurchasedQty)
                {
                    groupProductToUpdate.InputProductQuantity = newInputQuantity;
                    purchasedProduct.InputPurchasedtQuantity = 0;
                }
            }
            else
            {
                GroupProductDto newGroupProduct = new GroupProductDto
                    {
                        GroupId = selectedGroup.GroupId,
                        PurchasedProductId = purchasedProduct.PurchasedProductId,
                        ProductName = purchasedProduct.ProductName,
                        ProductPrice = purchasedProduct.ProductPrice,
                        AddedQty = 0,
                        InputProductQuantity = purchasedProduct.InputPurchasedtQuantity
                    };

                selectedGroup.GroupProductsDto ??= new List<GroupProductDto>();
                selectedGroup.GroupProductsDto.Add(newGroupProduct);
                purchasedProduct.InputPurchasedtQuantity = 0;
            }
        }

        StateHasChanged();
    }

    #endregion

    #region Helper Methods
    private GroupDto MapToGroupDto(Group group)
    {
        if (group == null)
        {
            return new GroupDto();
        }

        return new GroupDto
            {
                GroupId = group.GroupId,
                GroupName = group.GroupName,
                EAN = group.EAN,
                CustomerId = group.CustomerId,
                GroupProductsDto = group.GroupProducts.Select(gp => MapToGroupProductDto(gp)).ToList()
            };
    }
    private GroupProductDto MapToGroupProductDto(GroupProduct groupProduct)
    {
        if (groupProduct == null)
        {
            return new GroupProductDto();
        }

        return new GroupProductDto
            {
                GroupId = groupProduct.GroupId,
                PurchasedProductId = groupProduct.PurchasedProductId,
                ProductName = groupProduct?.PurchasedProduct?.ProductName ?? string.Empty,
                ProductPrice = groupProduct?.PurchasedProduct?.ProductPrice ?? 0.00M,
                AddedQty = groupProduct.AddedQuantity

            };
    }
    private PurchasedProductDto MapToPurchasedProductDto(PurchasedProduct purchasedProduct)
    {
        if (purchasedProduct == null)
        {
            return new PurchasedProductDto();
        }

        return new PurchasedProductDto
            {
                PurchasedProductId = purchasedProduct.ProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                PurchasedQty = purchasedProduct.PurchasedQty,
                CustomerId = customerId
            };
    }
    private UpdateQuantityVM MapToUpdateQuantityVM(ChangesDto dto)
    {
        return new UpdateQuantityVM
            {
                CustomerId = customerId,
                GroupId = dto.GroupId,
                LicenseId = dto.LicenseId,
                Name = dto.Name,
                Cost = dto.Cost,
                GPChangeQuantity = dto.GPChangeQuantity,
                PPChangeQuantity = dto.PPChangeQuantity
            };
    }
    #endregion

    #region Methods
    private void ShowGroupDetails(int groupId)
    {
        if (groupId > 0)
        {
            // Find the selected group and set it as the selectedGroup
            selectedGroupDto = customerGroupsDto.FirstOrDefault(g => g.GroupId == groupId);
            OldGroupName = selectedGroupDto.GroupName;
            displayGroupProducts = false; // Hide GroupProduct Table
        }
        else
        {
            // Clear the selectedGroup and show the GroupProduct Table
            selectedGroupDto = new GroupDto();
            displayGroupProducts = true;
        }
    }
    #endregion

    private void CreateGroup()
    {
        // Implement the logic to create a group here
        // For example, you can navigate to the CreateNewGroupPage with a route parameter
        //NavigationManager.NavigateTo($"/create-group/{customerId}", forceLoad: true);
        createGroupDialog.ShowDialog();
    }

    private async Task DeleteGroupWithAllItsGP(int groupId)
    {
        // check
        string msg = $"Du er ved at slette denne gruppe:\n(<strong>{selectedGroupDto.GroupName}</strong>) med alle dens ({selectedGroupDto.GroupProductsDto.Sum(gp => gp.AddedQty)}) licens , er du sikker?";
        bool confirmed = await _notificationService.ShowConfirmation(msg, true);
        //bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil selt gruppe\n{selectedGroupDto.GroupName}");
        if (confirmed)
        {
            bool result = await _IDeleteGroupWithProductsUC.ExecuteAsync(groupId);
            if (result)
            {
                await _notificationService.ShowSuccessNotification("Update Successful", "The group name has been updated successfully.");
                await LoadData();
            }
            else
            {
                await _notificationService.ShowErrorNotification("Update failed", "The group name has not  updated successfully.");
            }
        }
    }
}

@page "/customer/{customerId:int}"

@inject IGetCustomerWithGroupsAndProductsUC _IGetCustomerWithGroupsAndProductsUC
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC
@inject IUpdateGroupNameUC _IUpdateGroupNameUC
@inject IDeleteGroupWithProductsUC _IDeleteGroupWithProductsUC
@inject IAddPurchasedQtysToGroupProductsUC _IAddPurchasedQtysToGroupProductsUC
@inject NavigationManager NavigationManager
@inject NotificationService _notificationService

@inject IJSRuntime JSRuntime

    <div class="row">
        <!-- Left LayOut -->
    <div class="col-md-5 shadow-left">
            <!-- Customer Info Card -->
            <div class=" m-4 p-2">
            <p class="headerFont">Grupper (@customerGroups.Count())</p>
            </div>
            <!-- List of Groups -->
            @if (customerGroups != null)
            {
                @foreach (var group in customerGroups)
                {
                    <div class=" mb-4 p-1">
                        <details>
                            <!--Group Header-->
                            <summary class="d-flex justify-content-between align-items-center">
                                <div class="row row-cols-3 px-3">
                                <div class="col m-0">@_customer?.CustomerName @group.GroupName </div>
                                    <div class="col m-0"></div>
                                <div class="col m-0">EAN:<span class="col m-0 d-flex justify-content-start">@group.EAN</span> </div>

                                <div class="col m-0">Total:<span class="text-primary mx-4">@group.GetTotalPriceForAgroup().ToString("c2")</span></div>
                                <div class="col mx-0">(@group.GetTotalQuantityForAgroup()) licenses</div>
                                    <div class="col m-0"></div>
                                </div>
                            </summary>

                            <!-- Group -->
                            <div class="m-3">
                                <CustomGPHeaderRow Headers='new string[] { "Type", "Cost", "Remaining" }'
                                                   Conditions='new bool[] { true, true, true }' />
                                <table class="table">
                                    <tbody>
                                        @foreach (var product in group.GroupProducts)
                                        {
                                            <GetGroupProductItem GroupProduct="product" />
                                        }
                                    </tbody>
                                </table>
                                <div class="d-flex justify-content-between p-2">
                                    <button class="btn btn-outline-secondary" @onclick="()=>ShowGroupDetails(group.GroupId)">Edit</button>
                                    <button class="btn btn-outline-danger" @onclick="()=>DeleteGroupWithAllItsGP(group.GroupId)"><i class="fa fa-trash"></i></button>
                                </div>
                            </div>
                        </details>
                    </div>
                }
            }


        </div>
        <!-- Right LayOut- Group Detalis -->
        <div class="col-md-7 p-2 align-content-center">
            @if (selectedGroupDto != null)
            {
                @if (displayGroupProducts == false)
                {
                    <!-- Form Group -->
                    <div class="m-4">
                        <p class="header2Font">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.PurchasedQty))</p>
                        <p>Licenser kan redigeres til d.@DateTime.Now.ToString("dd MM yyyy").</p>
                    </div>
                    <div class="m-3 d-flex">
                        <EditGroup model="selectedGroupDto" OnValidSubmit="UpdateGroupNameAsync" />
                        <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                            <button type="submit" class="btn btn-outline-danger " @onclick="()=>DeleteGroupWithAllItsGP(selectedGroupDto.GroupId)"><i class="fa fa-trash"></i></button>
                        </div>
                    </div>

                    <!-- Group Products -->
                    <h5 class="mt-4 p-2 headerFont">Selected Licenses</h5>
                    <!-- GroupProduct Table -->
                    <div class="m-4">

                        <CustomGPHeaderRow Headers='new string[] { "Type", "Cost", "Remaining", "Quantity" }'
                                           Conditions='new bool[] { true, true, true, true }' />
                    </div>
                    <div class="row ">
                        <div class="col-sm-12">
                            <table class="table table-borderless">
                                <tbody>
                                    @foreach (var groupProduct in selectedGroupDto.GroupProductsDto)
                                    {
                                        int PP = groupProduct.GetPPAvailability(purchasedProductDtos);
                                        <tr class="d-flex justify-content-sm-between align-baseline">
                                            <td>@groupProduct.ProductName</td>
                                            <td>@groupProduct.ProductPrice</td>
                                            <td>
                                                <span>@groupProduct.AddedQty + ( @groupProduct.InputProductQuantity )= @(groupProduct.AddedQty + groupProduct.InputProductQuantity)</span>
                                            </td>
                                            <td>
                                                <div class="position-relative">
                                                    <input type="number"
                                                           min="0"
                                                           max="@PP"
                                                           class="inputNumber"
                                                           id="inputNumber@(groupProduct.PurchasedProductId)"
                                                    @bind-value="@groupProduct.InputProductQuantity"
                                                     />

                                                    @if ((PP - groupProduct.InputProductQuantity) == 0 || (groupProduct.AddedQty * -1 == groupProduct.InputProductQuantity))
                                                    {
                                                        <span class=" position-absolute bottom-0 start-0 translate-middle p-2 bg-danger border border-white rounded-circle">

                                                        </span>
                                                    }
                                                    @*else
                                        {
                                        <span class=" position-absolute bottom-0 start-0 translate-middle p-2 bg-success border border-light ">
                                        </span>
                                        }*@
                                                </div>
                                            </td>
                                            <td>
                                                <button class="btn btn-outline-danger" @onclick="()=>RemoveProduct(groupProduct)"><i class="fa fa-trash"></i></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>

                                <tr class="d-flex justify-content-between gap-1">
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td colspan="2" class="d-flex justify-content-between align-items-baseline px-3">
                                        <span>Total:</span>
                                        <span class="text-primary fw-bold">@selectedGroupDto.GroupProductsDto.Sum(p=> p.ProductPrice *( p.AddedQty+p.InputProductQuantity)).ToString("c")</span>
                                        <span>/</span>
                                        <span>(@selectedGroupDto.GroupProductsDto.Sum(p=> p.AddedQty + p.InputProductQuantity))</span>
                                        <span>licenser</span>
                                    </td>
                                    <td></td>

                                </tr>

                            </table>

                        </div>
                    </div>


                    <!-- Purchased Products Table -->
                    <h5 class="mt-4 p-2 headerFont">Choose from licenses</h5>
                    <div class="m-4">
                        <CustomGPHeaderRow Headers='new string[] { "Type", "Cost", "Remaining", "Quantity" }'
                                           Conditions='new bool[] { true, true, true, true }' />

                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (var Purchasedproduct in purchasedProductDtos)
                                        {
                                            int GP = Purchasedproduct.GetGPAvailability(selectedGroupDto.GroupProductsDto);
                                            <tr class="d-flex justify-content-sm-between align-baseline " >
                                                <td class="@(Purchasedproduct.PurchasedQty - (GP + Purchasedproduct.InputPurchasedtQuantity) == 0 ? "text-danger" : "")">@Purchasedproduct.ProductName</td>
                                                <td>@Purchasedproduct.ProductPrice</td>
                                                <td>
                                                    <span>@Purchasedproduct.PurchasedQty - ( @GP ) = @(Purchasedproduct.PurchasedQty - (GP + Purchasedproduct.InputPurchasedtQuantity))</span>
                                                </td>
                                                <td>
                                                    <div class="position-relative">
                                                        <input type="number"
                                                               min="0"
                                                               max="@(Purchasedproduct.PurchasedQty - GP)"
                                                               class="inputNumber"
                                                               id="inputNumber@(Purchasedproduct.PurchasedProductId)"
                                                        @bind-value="Purchasedproduct.InputPurchasedtQuantity"
                                                       />

                                                        @if (Purchasedproduct.PurchasedQty - (GP + Purchasedproduct.InputPurchasedtQuantity) == 0)
                                                        {
                                                            <span class="position-absolute bottom-0 start-0 translate-middle p-2 bg-danger border border-white">
                                                            </span>
                                                        }
                                                    </div>
                                                </td>
                                                <td></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <div class="d-flex justify-content-end">
                                    <button class="btn btn-primary rounded-pill px-4 fw-bold" @onclick="()=>AddPurchasedQuantitiesTGroupProduct(selectedGroupDto)">Add</button>
                                </div>
                            </div>
                            <div class="d-flex justify-content-end m-2 gap-1">
                                <button class="btn btn-secondary rounded-pill px-5 " @onclick="undoChanges">Disgard</button>
                                <button class="btn btn-success rounded-pill px-5 " @onclick="()=>showChangesToUpdate(selectedGroupDto,purchasedProductDtos)">Save</button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="p-2 ">
                        <!-- Purchased Products Table -->
                        <h4 class="mt-2 headerFont">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.PurchasedQty))</h4>
                        <h5 class="header2Font">  Licenser kan redigeres til d.@DateTime.UtcNow.ToString("dd MM yyyy"). </h5>
                        <table class="table table-borderless">
                            <thead>
                                <CustomTableHeaderRow Headers='new string[] { " Type", "Cost" , "Remaining" }'
                                                      Conditions='new bool[] { true, true, true }'>
                                </CustomTableHeaderRow>
                            </thead>
                            <tbody class="">
                                @foreach (var Purchasedproduct in purchasedProductDtos)
                                {
                                    <tr>
                                        <td>@Purchasedproduct.ProductName</td>
                                        <td>@Purchasedproduct.ProductPrice</td>
                                        <td>@Purchasedproduct.PurchasedQty</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="d-flex justify-content-end ">
                            <button class="btnAddGroup rounded-pill" @onclick="()=>CreateGroup()">Create Group</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
@*<ChangeSummary CustomerId="customerId" SelectedGroupDto="selectedGroupDto" ChangedGPDtos="changedGPDtos" />*@

<Dialog Title="@($"Change Summary : for {_customer.CustomerName}-{selectedGroupDto.GroupName} gruppe")"
        ConfirmButtonText="OK"
        CancelButtonText="Cancel" 
        @ref="dialog" SaveChnges="()=>SaveToDb(changedGPDtos)">
    <ChildContent>
        <ChangeSummary CustomerId="customerId" SelectedGroupDto="selectedGroupDto" ChangedGPDtos="changedGPDtos" />
    </ChildContent>

</Dialog>

<CreateGroupDialog CancelButtonText="close" Title="Create Group" @ref="createGroupDialog">
    <ChildContent>
        <CreateNewGroupPage customerId="customerId"  />
    </ChildContent>
</CreateGroupDialog>

@code {
    private CreateGroupDialog createGroupDialog;
    private Dialog dialog;
    private void ShowDialog()
    {
        dialog.ShowDialog();
    }
    private bool isLoading = true;

    private List<ChangesDto> changedGPDtos = new List<ChangesDto>();
    private List<UpdateQuantityVM> updateQuantityVmList = new List<UpdateQuantityVM>();

    private void showChangesToUpdate(GroupDto? selectedGroupDto, List<PurchasedProductDto> purchasedProductDtos)
    {
        changedGPDtos.Clear();
        if (purchasedProductDtos != null)
        {
            foreach (PurchasedProductDto PPProduct in purchasedProductDtos)
            {
                // Find the corresponding PP in the purchasedProductDtos by some identifier (e.g., ID or Name)
                ChangesDto ch = new ChangesDto();
                var GP = selectedGroupDto.GroupProductsDto.FirstOrDefault(gp => gp.PurchasedProductId == PPProduct.PurchasedProductId);
                if (GP != null && GP.InputProductQuantity > 0)
                {
                    ch.CustomerId = customerId;
                    ch.GroupId = selectedGroupDto.GroupId;
                    ch.LicenseId = GP.PurchasedProductId;
                    ch.Name = GP.ProductName;
                    ch.Cost = PPProduct.ProductPrice;
                    ch.GPChangeQuantity = GP.InputProductQuantity;
                    ch.PPChangeQuantity = (PPProduct.PurchasedQty - GP.InputProductQuantity);

                }
                else
                {
                    // Corresponding GP not found, use values from PPProduct
                    ch.CustomerId = customerId;
                    ch.GroupId = selectedGroupDto.GroupId;
                    ch.LicenseId = PPProduct.PurchasedProductId;
                    ch.Name = PPProduct.ProductName;
                    ch.Cost = PPProduct.ProductPrice;
                    ch.GPChangeQuantity = 0;
                    ch.PPChangeQuantity = PPProduct.PurchasedQty;
                }
                changedGPDtos.Add(ch);
            }
            ShowDialog();
        }
    }
    private async Task SaveToDb(List<ChangesDto> changedGPDtos)
    {
        updateQuantityVmList = changedGPDtos.Select(dto => MapToUpdateQuantityVM(dto)).ToList();
        //call save
        bool result = await _IAddPurchasedQtysToGroupProductsUC.ExecuteAsync(selectedGroupDto.GroupId, updateQuantityVmList);
        if (result)
        {
            // Update was successful, show a success notification
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Quantities Updated Successfully", "The groups quantities has been updated successfully.", "success");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Update failed", "The groups quantities has not  updated successfully.", "error");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadData();
        isLoading = false;
    }
    private async Task undoChanges()
    {
        await LoadData();
        ShowGroupDetails(selectedGroup.GroupId);
    }

    #region Param
    [Parameter]
    public int customerId { get; set; }
    private Customer? _customer = new Customer();
    private Group selectedGroup = new Group();
    private IEnumerable<Group> customerGroups = new List<Group>();
    private IEnumerable<PurchasedProduct> _PurchasedProducts = new List<PurchasedProduct>();
    private bool displayGroupProducts = true; // Flag to control GroupProduct Table display
    #endregion

    #region Dto Interacts Mehtods And Param

    private GroupDto? selectedGroupDto = new GroupDto();
    private IEnumerable<GroupDto> customerGroupsDto = new List<GroupDto>();
    private List<GroupProductDto>? groupProductDtos = new List<GroupProductDto>();
    private List<PurchasedProductDto>? purchasedProductDtos = new List<PurchasedProductDto>();

    private async Task LoadData()
    {
        // Load customer data, groups, and purchased products
        _customer = await _IGetCustomerWithGroupsAndProductsUC.ExecuteAsync(customerId);
        if (_customer != null)
        {
            // Load and map customer groups
            LoadCustomerGroups();

            // Load and map purchased products
            await LoadPurchasedProducts();
        }
    }
    private void LoadCustomerGroups()
    {
        customerGroups = _customer.Groups.ToList();
        if (customerGroups != null)
        {
            customerGroupsDto = customerGroups.Select(group => MapToGroupDto(group)).ToList();
        }
    }
    private async Task LoadPurchasedProducts()
    {
        _PurchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);
        if (_PurchasedProducts != null)
        {
            purchasedProductDtos = _PurchasedProducts.Select(p => MapToPurchasedProductDto(p)).ToList();
        }
    }


    #endregion

    #region Manpulate
    private async Task UpdateGroupNameAsync()
    {
        bool confirmed = await _notificationService.ShowConfirmation($"Du er ved at ændre gruppenavnet til<strong> {selectedGroupDto.GroupName}</strong>, er du sikker? ",true);
        //bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil opdaterer gruppen\nAarhus Kommune {selectedGroupDto.GroupName}");
        if (confirmed)
        {
            var result = await _IUpdateGroupNameUC.ExcecuteAsync(selectedGroupDto.GroupId, selectedGroupDto.GroupName);
            if (result)
            {
                // Update was successful, show a success notification
                await _notificationService.ShowSuccessNotification("Update Successful", "The group name has been updated successfully.");
                //await JSRuntime.InvokeVoidAsync("Swal.fire", "Update Successful", "The group name has been updated successfully.", "success");
            }
            else
            {
                await _notificationService.ShowErrorNotification("Update failed", "The group name has not  updated successfully.");
                //await JSRuntime.InvokeVoidAsync("Swal.fire", "Update failed", "The group name has not  updated successfully.", "error");
            }
        }
    }
    #endregion

    #region User Interacting
    private void RemoveProduct(GroupProductDto groupProduct)
    {
        PurchasedProductDto? PP = purchasedProductDtos?.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);
        if (PP != null)
        {

            // Add the removed quantity back to PurchasedQty
            PP.PurchasedQty += groupProduct.AddedQty;
            PP.InputPurchasedtQuantity = 0;
            // Remove the product from the list
            selectedGroupDto?.GroupProductsDto.Remove(groupProduct);
        }
        else
        {
            PurchasedProductDto newPP = new PurchasedProductDto()
            {
                    PurchasedProductId = groupProduct.PurchasedProductId,
                    ProductName=groupProduct.ProductName,
                    ProductPrice=groupProduct.ProductPrice,
                    PurchasedQty=groupProduct.AddedQty
            };
            if (purchasedProductDtos!=null)
            {
                selectedGroupDto?.GroupProductsDto.Remove(groupProduct);
                purchasedProductDtos.Add(newPP);
            }
        }
        StateHasChanged();
    }

    private void AddPurchasedQuantitiesTGroupProduct(GroupDto selectedGroup)
    {
        if (purchasedProductDtos != null && purchasedProductDtos.Count() > 0)
        {
            foreach (PurchasedProductDto purchasedProduct in purchasedProductDtos)
            {
                if (purchasedProduct.InputPurchasedtQuantity <= 0)
                {
                    continue;
                }
                if (selectedGroup.GroupProductsDto != null)

                {
                    // Retrieve the corresponding product in the GroupProductsDto list
                    GroupProductDto? groupProductToUpdate = selectedGroup.GroupProductsDto
                     .FirstOrDefault(gp => gp.PurchasedProductId == purchasedProduct.PurchasedProductId);
                    // Get GP Availability
                    // the List<GP> has an object of type GP which GP_Id = PP_Id
                    if (groupProductToUpdate != null &&
                    (groupProductToUpdate.InputProductQuantity + purchasedProduct.InputPurchasedtQuantity) <= (purchasedProduct.PurchasedQty))
                    {
                        groupProductToUpdate.InputProductQuantity += purchasedProduct.InputPurchasedtQuantity;
                        purchasedProduct.InputPurchasedtQuantity = 0;
                    }
                    else
                    {
                        GroupProductDto newGroupProduct = new GroupProductDto
                            {
                                GroupId = selectedGroup.GroupId,
                                PurchasedProductId = purchasedProduct.PurchasedProductId,
                                ProductName = purchasedProduct.ProductName,
                                ProductPrice = purchasedProduct.ProductPrice,
                                AddedQty = 0,
                                InputProductQuantity = purchasedProduct.InputPurchasedtQuantity
                            };

                        selectedGroup.GroupProductsDto.Add(newGroupProduct);
                        purchasedProduct.InputPurchasedtQuantity = 0;
                    }

                    StateHasChanged();
                }
            }
        }

    }
    #endregion

    #region Helper Methods
    private GroupDto MapToGroupDto(Group group)
    {
        if (group == null)
        {
            return null;
        }

        return new GroupDto
            {
                GroupId = group.GroupId,
                GroupName = group.GroupName,
                EAN = group.EAN,
                CustomerId = customerId,
                GroupProductsDto = group.GroupProducts.Select(gp => MapToGroupProductDto(gp)).ToList()
            };
    }
    private GroupProductDto MapToGroupProductDto(GroupProduct groupProduct)
    {
        if (groupProduct == null)
        {
            return null;
        }

        return new GroupProductDto
            {
                GroupId = groupProduct.GroupId,
                PurchasedProductId = groupProduct.PurchasedProductId,
                ProductName = groupProduct.PurchasedProduct?.ProductName,
                ProductPrice = groupProduct.PurchasedProduct?.ProductPrice ?? 0.00M,
                AddedQty = groupProduct.AddedQuantity

            };
    }
    private PurchasedProductDto MapToPurchasedProductDto(PurchasedProduct purchasedProduct)
    {
        if (purchasedProduct == null)
        {
            return null;
        }

        return new PurchasedProductDto
            {
                PurchasedProductId = purchasedProduct.ProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                PurchasedQty = purchasedProduct.PurchasedQty,
                CustomerId = customerId
            };
    }
    private UpdateQuantityVM MapToUpdateQuantityVM(ChangesDto dto)
    {
        return new UpdateQuantityVM
            {
                CustomerId = customerId,
                GroupId = dto.GroupId,
                LicenseId = dto.LicenseId,
                Name = dto.Name,
                Cost = dto.Cost,
                GPChangeQuantity = dto.GPChangeQuantity,
                PPChangeQuantity = dto.PPChangeQuantity
            };
    }
    #endregion

    #region Methods
    private void ShowGroupDetails(int groupId)
    {
        if (groupId > 0)
        {
            // Find the selected group and set it as the selectedGroup
            selectedGroupDto = customerGroupsDto.FirstOrDefault(g => g.GroupId == groupId);
            displayGroupProducts = false; // Hide GroupProduct Table
        }
        else
        {
            // Clear the selectedGroup and show the GroupProduct Table
            selectedGroupDto = new GroupDto();
            displayGroupProducts = true;
        }
    }
    #endregion

    private void CreateGroup()
    {
        // Implement the logic to create a group here
        // For example, you can navigate to the CreateNewGroupPage with a route parameter
        //NavigationManager.NavigateTo($"/create-group/{customerId}", forceLoad: true);
        createGroupDialog.ShowDialog();
    }

    private async Task DeleteGroupWithAllItsGP(int groupId)
    {
        // check
        string msg = $"Du er ved at slette denne gruppe:\n(<strong>{selectedGroupDto.GroupName}</strong>) med alle dens ({selectedGroupDto.GroupProductsDto.Sum(gp => gp.AddedQty)}) licens , er du sikker?";
        bool confirmed = await _notificationService.ShowConfirmation(msg, true);
        //bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil selt gruppe\n{selectedGroupDto.GroupName}");
        if (confirmed)
        {
            bool result = await _IDeleteGroupWithProductsUC.ExecuteAsync(groupId);
            if (result)
            {
                await _notificationService.ShowSuccessNotification("Update Successful", "The group name has been updated successfully.");
                await LoadData();
            }
            else
            {
                await _notificationService.ShowErrorNotification("Update failed", "The group name has not  updated successfully.");
            }
        }
    }
}

@page "/customer/{customerId:int}"

@inject IGetCustomerWithGroupsAndProductsUC _IGetCustomerWithGroupsAndProductsUC
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC
@inject IUpdateGroupNameUC _IUpdateGroupNameUC
@inject IDeleteGroupWithProductsUC _IDeleteGroupWithProductsUC
@inject IAddPurchasedQtysToGroupProductsUC _IAddPurchasedQtysToGroupProductsUC
@inject NavigationManager NavigationManager
@inject NotificationService _notificationService
@inject IJSRuntime JSRuntime

<div class="row">
    <!-- Left LayOut -->
    <div class="col-md-5 shadow-left">
        <!-- Customer Info Card -->
        <HearderSurvery HeaderText="@($"Grupper ({@customerGroups.Count()})")" HeaderClass="headerFont" SubHeaderText="">
            <ChildContent>
            </ChildContent>
        </HearderSurvery>

        <!-- List of Groups -->
        @if (customerGroups != null)
        {
            @foreach (var group in customerGroups)
            {
                <div class=" mb-4 p-1">
                    <CustomerGroupDetails group="group"
                                          _customer="_customer"
                                          ShowGroupDetails="ShowGroupDetails"
                                          DeleteGroupWithAllItsGP="DeleteGroupWithAllItsGP" />
                </div>
            }
        }
    </div>
    <!-- Right LayOut- Group Detalis -->
    <div class="col-md-7">
        <div class="mx-lg-5">
            @if (selectedGroupDto != null)
            {
                @if (displayGroupProducts == false)
                {
                    <!-- Form Group -->
                
                        <HearderSurvery HeaderText="@($"Licenser til tildeling: ({@purchasedProductDtos?.Sum(p=>p.PurchasedQty)})")" HeaderClass="headerFont" SubHeaderText="" HeaderSubClass="header2Font">
                            <ChildContent>
                            <p><i class="fa fa-exclamation-circle p-2 text-primary w-15 h-15 "></i>Licenser kan redigeres til d.@DateTime.Now.ToString("dd MM yyyy").</p>
                            </ChildContent>
                        </HearderSurvery>
                 
                    <div class="row d-flex justify-content-between align-content-center">
                        <div class="col-sm-10 col-md-10 ">
                            <EditGroup model="selectedGroupDto"
                                       OnValidSubmit="UpdateGroupNameAsync" />
                        </div>
                        <div class="col-sm-2 col-md-2 text-end d-flex align-items-center justify-content-end">
                            <button type="submit" class="btn btn-outline-danger border-0" @onclick="()=>DeleteGroupWithAllItsGP(selectedGroupDto.GroupId)">
                                <i class="fa fa-trash"></i>
                            </button>
                        </div>

                    </div>

                    <!-- Group Products -->
                    <HearderSurvery HeaderText="Selected Licenses" HeaderClass="headerFont" SubHeaderText="">
                        <ChildContent>

                        </ChildContent>
                    </HearderSurvery>
                    <!-- GroupProduct Table -->

                    <div class="row">
                        <div class="col-md-10">
                            <div class="">
                                <CustomGPHeaderRow Headers='new string[] { "Type", "Cost", "Remaining", "Quantity" }'
                                                   Conditions='new bool[] { true, true, true, true }' />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <table class="table table-borderless">
                                <tbody>
                                    @foreach (var groupProduct in selectedGroupDto.GroupProductsDto)
                                    {
                                        int PP = groupProduct.GetPPAvailability(purchasedProductDtos ?? new List<PurchasedProductDto>(), groupProduct.PurchasedProductId);
                                        <GroupProductTableRow GroupProduct="groupProduct"
                                                              PurchasedProductAvailability="PP"
                                                              RemoveProduct="RemoveProduct"
                                                              PurchasedProductAvailabilityQuantityChanged="HandleInputProductQuantityChanged" />
                                    }

                                </tbody>
                                <tfoot>
                                    <tr class="d-flex justify-content-lg-between gap-1">
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td colspan="3">
                                            <span>Total:</span>
                                            <span class="text-primary fw-bold">@selectedGroupDto.GroupProductsDto.Sum(p => p.ProductPrice * (p.AddedQty + p.InputProductQuantity)).ToString("c")</span>
                                            <span>/</span>
                                            <span>(@selectedGroupDto.GroupProductsDto.Sum(p => p.AddedQty + p.InputProductQuantity))</span>
                                            <span>licenser</span>

                                        </td>
                                        <td></td>
                                    </tr>
                                </tfoot>

                            </table>
                        </div>
                    </div>

                    <!-- Purchased Products Table -->
                    <HearderSurvery HeaderText="Choose from licenses" HeaderClass="headerFont" SubHeaderText="">
                        <ChildContent>

                        </ChildContent>
                    </HearderSurvery>
                    <div class="row">
                        <div class="col-md-10">
                            <div class="">
                                <CustomGPHeaderRow Headers='new string[] { "Type", "Cost", "Remaining", "Quantity" }'
                                                   Conditions='new bool[] { true, true, true, true }' />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            @if (purchasedProductDtos != null && purchasedProductDtos.Any())
                            {
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (var Purchasedproduct in purchasedProductDtos)
                                        {
                                            int GP = Purchasedproduct.GetGPAvailability(selectedGroupDto.GroupProductsDto, Purchasedproduct.PurchasedProductId);

                                            <PurchasedProductTableRow PurchasedProduct="Purchasedproduct"
                                                                      GroupProductQuantityAvailability="@(GP)"
                                                                      UpdateState="HandleInputProductQuantityChanged" />
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <table class="table table-borderless">
                                    <tbody>
                                        <tr class="">
                                            <td> No Purchased Product ...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            }

                        </div>
                    </div>


                    <div class="d-flex justify-content-end">
                        <button class="btn btn-primary rounded-pill px-4 fw-bold" @onclick="()=>AddPurchasedQuantitiesToGroupProduct(selectedGroupDto)">Add</button>
                    </div>

                    <div class="d-flex justify-content-end m-2 gap-1">
                        <button class="btn btn-secondary rounded-pill px-5 " @onclick="undoChanges">Disgard</button>
                        <button class="btn btn-success rounded-pill px-5 " @onclick="()=>showChangesToUpdate(selectedGroupDto,purchasedProductDtos)">Save</button>
                    </div>
                }
                else
                {
                    <div class="p-2 ">
                        <!-- Purchased Products Table -->
                        <HearderSurvery HeaderText="@($"Licenser til tildeling: ({@purchasedProductDtos?.Sum(p=>p.PurchasedQty)})")" HeaderClass="headerFont" SubHeaderText="" HeaderSubClass="header2Font">
                            <ChildContent>
                                <p><i class="fa fa-exclamation-circle p-2 text-primary w-15 h-15 "></i>Licenser kan redigeres til d.@DateTime.Now.ToString("dd MM yyyy").</p>
                            </ChildContent>
                        </HearderSurvery>
                        <div class="col-sm-12 col-m-12 d-flex justify-content-sm-between align-content-between px-4 py-2">
                            <CustomGPHeaderRow Headers='new string[] { " Type", "Cost" , "Remaining" }'
                                               Conditions='new bool[] { true, true, true }'>
                            </CustomGPHeaderRow>
                        </div>
                        <div class="col-sm-12 col-m-12 d-flex justify-content-sm-between align-content-between px-4 py-2">
                            <PurchasedProductTable PurchasedProductDtos="purchasedProductDtos" />
                        </div>
                        <div class="col-sm-12 col-m-12 d-flex justify-content-sm-end align-content-between px-4 py-2 ">
                            <button class="btn btn-light mx-2 rounded-pill fw-bold" @onclick="()=>CreateGroup()">Create Group</button>
                        </div>
                    </div>
                }
            }
        </div>

    </div>
</div>


<Dialog Title="@($"Change Summary : for {_customer?.CustomerName?? string.Empty}-{selectedGroupDto?.GroupName ?? string.Empty } gruppe")"
        ConfirmButtonText="OK"
        CancelButtonText="Cancel"
@ref="dialog" SaveChnges="()=>SaveToDb(changedGPDtos)">
    <ChildContent>
        <ChangeSummary CustomerId="customerId" SelectedGroupDto="selectedGroupDto" ChangedGPDtos="changedGPDtos" />
    </ChildContent>

</Dialog>

<CreateGroupDialog CancelButtonText="close" Title="Create Group" @ref="createGroupDialog">
    <ChildContent>
        <CreateNewGroupPage customerId="customerId" />
    </ChildContent>
</CreateGroupDialog>



@code {
    private string OldGroupName { get; set;} = string.Empty;
    private void HandleInputProductQuantityChanged()
    {
        // Call StateHasChanged if needed to re-render the component
        StateHasChanged();
    }
    private CreateGroupDialog createGroupDialog { get; set; } = new CreateGroupDialog();
    private Dialog dialog { get; set; } = new Dialog();
    private void ShowDialog()
    {
        dialog.ShowDialog();
    }
    private List<ChangesDto> changedGPDtos = new List<ChangesDto>();
    private List<UpdateQuantityVM> updateQuantityVmList = new List<UpdateQuantityVM>();

    private void showChangesToUpdate(GroupDto? selectedGroupDto, List<PurchasedProductDto> purchasedProductDtos)
    {
        changedGPDtos.Clear();
        if (purchasedProductDtos != null)
        {
            foreach (PurchasedProductDto PPProduct in purchasedProductDtos)
            {
                // Find the corresponding PP in the purchasedProductDtos by some identifier (e.g., ID or Name)
                ChangesDto ch = new ChangesDto();
                var GP = selectedGroupDto.GroupProductsDto.FirstOrDefault(gp => gp.PurchasedProductId == PPProduct.PurchasedProductId);
                if (GP != null && GP.InputProductQuantity > 0)
                {
                    ch.CustomerId = customerId;
                    ch.GroupId = selectedGroupDto.GroupId;
                    ch.LicenseId = GP.PurchasedProductId;
                    ch.Name = GP.ProductName;
                    ch.Cost = PPProduct.ProductPrice;
                    ch.GPChangeQuantity = GP.InputProductQuantity;
                    ch.PPChangeQuantity = (PPProduct.PurchasedQty - GP.InputProductQuantity);

                }
                else
                {
                    // Corresponding GP not found, use values from PPProduct
                    ch.CustomerId = customerId;
                    ch.GroupId = selectedGroupDto.GroupId;
                    ch.LicenseId = PPProduct.PurchasedProductId;
                    ch.Name = PPProduct.ProductName;
                    ch.Cost = PPProduct.ProductPrice;
                    ch.GPChangeQuantity = 0;
                    ch.PPChangeQuantity = PPProduct.PurchasedQty;
                }
                changedGPDtos.Add(ch);
            }
            ShowDialog();
        }
    }
    private async Task SaveToDb(List<ChangesDto> changedGPDtos)
    {
        if (selectedGroupDto.GroupName.Trim().ToLower() != OldGroupName.ToLower().Trim())
        {
            await UpdateGroupNameAsync();
        }

        updateQuantityVmList = changedGPDtos.Select(dto => MapToUpdateQuantityVM(dto)).ToList();
        //call save
        if (selectedGroupDto != null)
        {
            bool result = await _IAddPurchasedQtysToGroupProductsUC.ExecuteAsync(selectedGroupDto.GroupId, updateQuantityVmList);
            if (result)
            {
                // Update was successful, show a success notification
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Quantities Updated Successfully", "The groups quantities has been updated successfully.", "success");
                await LoadData();
                ShowGroupDetails(selectedGroup.GroupId);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Update failed", "The groups quantities has not  updated successfully.", "error");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task undoChanges()
    {
        await LoadData();
        ShowGroupDetails(selectedGroup.GroupId);
    }

    #region Param
    [Parameter]
    public int customerId { get; set; }
    private Customer? _customer = new Customer();
    private Group selectedGroup = new Group();
    private IEnumerable<Group> customerGroups = new List<Group>();
    private IEnumerable<PurchasedProduct> _PurchasedProducts = new List<PurchasedProduct>();
    private bool displayGroupProducts = true; // Flag to control GroupProduct Table display
    #endregion

    #region Dto Interacts Mehtods And Param

    private GroupDto? selectedGroupDto = new GroupDto();
    private IEnumerable<GroupDto> customerGroupsDto = new List<GroupDto>();
    private List<GroupProductDto>? groupProductDtos = new List<GroupProductDto>();
    private List<PurchasedProductDto>? purchasedProductDtos = new List<PurchasedProductDto>();

    private async Task LoadData()
    {
        // Load customer data, groups, and purchased products
        _customer = await _IGetCustomerWithGroupsAndProductsUC.ExecuteAsync(customerId);
        if (_customer != null)
        {
            // Load and map customer groups
            await LoadCustomerGroups();

            // Load and map purchased products
            await LoadPurchasedProducts();
        }
    }
    private async Task LoadCustomerGroups()
    {
        if (_customer != null)
        {
            customerGroups = await Task.Run(() => _customer.Groups.ToList());
            if (customerGroups != null)
            {
                customerGroupsDto = customerGroups.Select(group => MapToGroupDto(group)).ToList();
            }
        }

    }
    private async Task LoadPurchasedProducts()
    {
        _PurchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);
        if (_PurchasedProducts != null)
        {
            purchasedProductDtos = _PurchasedProducts.Select(PP => MapToPurchasedProductDto(PP)).ToList();
        }
    }


    #endregion

    #region Manpulate
    private async Task UpdateGroupNameAsync()
    {
        bool confirmed = await _notificationService.ShowConfirmation($"Du er ved at ændre gruppenavnet til<strong> {selectedGroupDto.GroupName}</strong>, er du sikker? ", true);
        //bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil opdaterer gruppen\nAarhus Kommune {selectedGroupDto.GroupName}");
        if (confirmed)
        {
            var result = await _IUpdateGroupNameUC.ExcecuteAsync(selectedGroupDto.GroupId, selectedGroupDto.GroupName);
            if (result)
            {
                // Update was successful, show a success notification
                await _notificationService.ShowSuccessNotification("Update Successful", "The group name has been updated successfully.");
                //await JSRuntime.InvokeVoidAsync("Swal.fire", "Update Successful", "The group name has been updated successfully.", "success");
            }
            else
            {
                await _notificationService.ShowErrorNotification("Update failed", "The group name has not  updated successfully.");
                //await JSRuntime.InvokeVoidAsync("Swal.fire", "Update failed", "The group name has not  updated successfully.", "error");
            }
        }
    }
    #endregion

    #region User Interacting
    private void RemoveProduct(GroupProductDto groupProduct)
    {
        PurchasedProductDto? PP = purchasedProductDtos?.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);
        if (PP != null)
        {

            // Add the removed quantity back to PurchasedQty
            PP.PurchasedQty += groupProduct.AddedQty;
            PP.InputPurchasedtQuantity = 0;
            // Remove the product from the list
            selectedGroupDto?.GroupProductsDto.Remove(groupProduct);
        }
        else
        {
            PurchasedProductDto newPP = new PurchasedProductDto()
                {
                    PurchasedProductId = groupProduct.PurchasedProductId,
                    ProductName = groupProduct.ProductName,
                    ProductPrice = groupProduct.ProductPrice,
                    PurchasedQty = groupProduct.AddedQty
                };
            if (purchasedProductDtos != null)
            {
                selectedGroupDto?.GroupProductsDto.Remove(groupProduct);
                purchasedProductDtos.Add(newPP);
            }
        }
        StateHasChanged();
    }

    private void AddPurchasedQuantitiesToGroupProduct(GroupDto selectedGroup)
    {
        if (purchasedProductDtos == null || !purchasedProductDtos.Any())
        {
            return;
        }

        foreach (var purchasedProduct in purchasedProductDtos.Where(pp => pp.InputPurchasedtQuantity > 0))
        {
            var groupProductToUpdate = selectedGroup.GroupProductsDto?
                .FirstOrDefault(gp => gp.PurchasedProductId == purchasedProduct.PurchasedProductId);

            if (groupProductToUpdate != null)
            {
                int newInputQuantity = groupProductToUpdate.InputProductQuantity + purchasedProduct.InputPurchasedtQuantity;

                if (newInputQuantity <= purchasedProduct.PurchasedQty)
                {
                    groupProductToUpdate.InputProductQuantity = newInputQuantity;
                    purchasedProduct.InputPurchasedtQuantity = 0;
                }
            }
            else
            {
                GroupProductDto newGroupProduct = new GroupProductDto
                    {
                        GroupId = selectedGroup.GroupId,
                        PurchasedProductId = purchasedProduct.PurchasedProductId,
                        ProductName = purchasedProduct.ProductName,
                        ProductPrice = purchasedProduct.ProductPrice,
                        AddedQty = 0,
                        InputProductQuantity = purchasedProduct.InputPurchasedtQuantity
                    };

                selectedGroup.GroupProductsDto ??= new List<GroupProductDto>();
                selectedGroup.GroupProductsDto.Add(newGroupProduct);
                purchasedProduct.InputPurchasedtQuantity = 0;
            }
        }

        StateHasChanged();
    }

    #endregion

    #region Helper Methods
    private GroupDto MapToGroupDto(Group group)
    {
        if (group == null)
        {
            return new GroupDto();
        }

        return new GroupDto
            {
                GroupId = group.GroupId,
                GroupName = group.GroupName,
                EAN = group.EAN,
                CustomerId = customerId,
                GroupProductsDto = group.GroupProducts.Select(gp => MapToGroupProductDto(gp)).ToList()
            };
    }
    private GroupProductDto MapToGroupProductDto(GroupProduct groupProduct)
    {
        if (groupProduct == null)
        {
            return new GroupProductDto();
        }

        return new GroupProductDto
            {
                GroupId = groupProduct.GroupId,
                PurchasedProductId = groupProduct.PurchasedProductId,
                ProductName = groupProduct.PurchasedProduct.ProductName ?? string.Empty,
                ProductPrice = groupProduct.PurchasedProduct?.ProductPrice ?? 0.00M,
                AddedQty = groupProduct.AddedQuantity

            };
    }
    private PurchasedProductDto MapToPurchasedProductDto(PurchasedProduct purchasedProduct)
    {
        if (purchasedProduct == null)
        {
            return new PurchasedProductDto();
        }

        return new PurchasedProductDto
            {
                PurchasedProductId = purchasedProduct.ProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                PurchasedQty = purchasedProduct.PurchasedQty,
                CustomerId = customerId
            };
    }
    private UpdateQuantityVM MapToUpdateQuantityVM(ChangesDto dto)
    {
        return new UpdateQuantityVM
            {
                CustomerId = customerId,
                GroupId = dto.GroupId,
                LicenseId = dto.LicenseId,
                Name = dto.Name,
                Cost = dto.Cost,
                GPChangeQuantity = dto.GPChangeQuantity,
                PPChangeQuantity = dto.PPChangeQuantity
            };
    }
    #endregion

    #region Methods
    private void ShowGroupDetails(int groupId)
    {
        if (groupId > 0)
        {
            // Find the selected group and set it as the selectedGroup
            selectedGroupDto = customerGroupsDto.FirstOrDefault(g => g.GroupId == groupId);
            OldGroupName = selectedGroupDto.GroupName;
            displayGroupProducts = false; // Hide GroupProduct Table
        }
        else
        {
            // Clear the selectedGroup and show the GroupProduct Table
            selectedGroupDto = new GroupDto();
            displayGroupProducts = true;
        }
    }
    #endregion

    private void CreateGroup()
    {
        // Implement the logic to create a group here
        // For example, you can navigate to the CreateNewGroupPage with a route parameter
        //NavigationManager.NavigateTo($"/create-group/{customerId}", forceLoad: true);
        createGroupDialog.ShowDialog();
    }

    private async Task DeleteGroupWithAllItsGP(int groupId)
    {
        // check
        string msg = $"Du er ved at slette denne gruppe:\n(<strong>{selectedGroupDto.GroupName}</strong>) med alle dens ({selectedGroupDto.GroupProductsDto.Sum(gp => gp.AddedQty)}) licens , er du sikker?";
        bool confirmed = await _notificationService.ShowConfirmation(msg, true);
        //bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil selt gruppe\n{selectedGroupDto.GroupName}");
        if (confirmed)
        {
            bool result = await _IDeleteGroupWithProductsUC.ExecuteAsync(groupId);
            if (result)
            {
                await _notificationService.ShowSuccessNotification("Update Successful", "The group name has been updated successfully.");
                await LoadData();
            }
            else
            {
                await _notificationService.ShowErrorNotification("Update failed", "The group name has not  updated successfully.");
            }
        }
    }
}

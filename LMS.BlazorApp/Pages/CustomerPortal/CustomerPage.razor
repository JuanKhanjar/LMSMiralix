@page "/customer/{customerId:int}"
@using LMS.BlazorApp.Dtos;
@using LMS.BlazorApp.ExtensionsMethods;
@using LMS.BusinessUseCases.CustomerUCs.CustomerUCInterfaces;
@using LMS.BusinessCore.Extensions.GroupExtentionsMethods;
@using LMS.BusinessUseCases.GroupUCs.GroupUCInterfaces;
@using LMS.BusinessUseCases.PurchasedProductsUCs.PurchasedProductsUCsInterfaces;
@inject IGetCustomerWithGroupsAndProductsUC _IGetCustomerWithGroupsAndProductsUC
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC
@inject IUpdateGroupNameUC _IUpdateGroupNameUC
@using LMS.BlazorApp.Extensions;
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<div class="container-fluid mt-30">
    <div class="row">
        <!-- Left LayOut -->
        <div class="col-md-5 card ">
            <!-- Customer Info Card -->
            <div class=" m-4 p-2">
                <p class="headerFont">Grupper (@customerGroups.Count())</p>
            </div>
            <!-- List of Groups -->
            @if (customerGroups!=null)
            {
                @foreach (var group in customerGroups)
                {
                    <div class=" mb-4 p-1">
                        <details>
                            <!--Group Header-->
                            <summary class="d-flex justify-content-between header2Font">
                                <div class="row row-cols-3">
                                    <div class="col m-0">@_customer?.CustomerName @group.GroupName </div>
                                    <div class="col m-0"></div>
                                    <div class="col m-0">EAN:<span class="text-secondary mx-4">@group.EAN</span> </div>

                                    <div class="col m-0">Total:<span class="text-primary mx-4">@group.GetTotalPriceForAgroup().ToString("c2")</span></div>
                                    <div class="col mx-0">(@group.GetTotalQuantityForAgroup()) licenses</div>
                                    <div class="col m-0"></div>
                                </div>
                            </summary>

                            <!-- Group -->
                            <div class="card-body">
                                <table class="table table-borderless m-2 custom-table">
                                    <thead style="background:#dee2e6;">
                                        <tr class="custom-header-row">
                                            <th>Type</th>
                                            <th>Cost</th>
                                            <th>Remaining</th>
                                        </tr>
                                    </thead>
                                    <tbody class="">
                                        @foreach (var product in group.GroupProducts)
                                        {
                                            <GetGroupProductItem GroupProduct="product" />
                                        }
                                    </tbody>
                                </table>

                                <div class="d-flex justify-content-between p-2">
                                    <button class="btn btn-outline-secondary" @onclick="()=>ShowGroupDetails(group.GroupId)">Edit</button>
                                    <button class="btn btn-outline-danger" @onclick="()=>ShowGroupDetails(group.GroupId)"><i class="fa fa-trash"></i></button>
                                </div>
                            </div>
                        </details>
                    </div>
                }
            }
           

        </div>
        <!-- Right LayOut- Group Detalis -->
        <div class="col-md-7">
            @if (selectedGroupDto != null)
            {
                @if (displayGroupProducts == false)
                {
                    <!-- Form Group -->
                    <div class="m-4">
                        <p class="header2Font">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.PurchasedQty))</p>
                        <p>Licenser kan redigeres til d.@DateTime.Now.ToString("dd MM yyyy").</p>
                    </div>
                    <div class="m-3 d-flex">
                        <div class="card-body p-1 ">
                            <EditForm Model="selectedGroupDto" OnValidSubmit="UpdateGroupAsync" class="">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="row d-flex justify-content-center">
                                    <div class="form-group col-md-10 d-flex justify-content-between">
                                        <div class="form-group col-md-6">
                                            <label for="GroupName">Group Name:</label>
                                            <InputText id="GroupName" @bind-Value="selectedGroupDto.GroupName" class="form-control inputGroupName" />
                                            <ValidationMessage For="@(() => selectedGroupDto.GroupName)" />
                                        </div>
                                        <div class="form-group col-md-3">
                                            <label for="EANName">EAN:</label>
                                            <input type="text" id="EANName" value="@selectedGroupDto.EAN" class="form-control inputGroupEAN bg-white" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                                        <button type="submit"
                                                class="btn btn-outline-success mx-4">


                                            <i class="fa fa-save"></i>
                                        </button>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                        <div class="form-group col-md-2 d-flex justify-content-evenly p-3">
                            <button type="submit" class="btn btn-outline-danger "><i class="fa fa-trash"></i></button>
                        </div>
                    </div>

                    <!-- Group Products -->
                    <h5 class="mt-4 p-2 headerFont">Selected Licenses</h5>
                    <!-- GroupProduct Table -->
                    <div class="m-4">
                        <div class="row mx-2 ">
                            <div class="col-sm-11 d-flex justify-content-sm-between align-baseline headerFont bg-light p-2 ">
                                <div class="col-sm-3 ">
                                    Type
                                </div>
                                <div class="col-sm-3 ">
                                    Cost
                                </div>
                                <div class="col-sm-3 ">
                                    Remaining
                                </div>
                                <div class="col-sm-3 ">
                                    Quantity
                                </div>
                            </div>
                            <div class="col-sm-1">
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (var groupProduct in selectedGroupDto.GroupProductsDto)
                                        {
                                            int PP = groupProduct.GetPPAvailability(purchasedProductDtos);
                                            <tr class="d-flex justify-content-sm-between align-baseline ">
                                                <td>@groupProduct.ProductName</td>
                                                <td>@groupProduct.ProductPrice</td>
                                                <td>
                                                    <span>@groupProduct.AddedQty + ( @groupProduct.InputProductQuantity )= @(groupProduct.AddedQty + groupProduct.InputProductQuantity)</span>
                                                </td>
                                                <td>
                                                    <div class="position-relative">
                                                        <input type="number"
                                                               min="0"
                                                               max="@PP"
                                                               class="inputNumber"
                                                               id="inputNumber@(groupProduct.PurchasedProductId)"
                                                   @bind-value="@groupProduct.InputProductQuantity"
                                                   @oninput="() => UpdatePPQuantity(groupProduct)" />
                                                        @if ((PP - groupProduct.InputProductQuantity) == 0 || (groupProduct.AddedQty * -1 == groupProduct.InputProductQuantity))
                                                        {
                                                            <span class=" position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle">

                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class=" position-absolute top-0 start-100 translate-middle p-2 bg-success border border-light rounded-circle">
                                                            </span>
                                                        }
                                                    </div>
                                                </td>
                                                <td>
                                                    <button class="btn btn-outline-danger" @onclick="()=>RemoveProduct(groupProduct)"><i class="fa fa-trash"></i></button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>

                                    <tr class="d-flex justify-content-between gap-1">
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td colspan="2" class="d-flex justify-content-between align-items-baseline px-3">
                                            <span>Total:</span>
                                            <span class="text-primary fw-bold">@selectedGroupDto.GroupProductsDto.Sum(p=> p.ProductPrice *( p.AddedQty+p.InputProductQuantity)).ToString("c")</span>
                                            <span>/</span>
                                            <span>(@selectedGroupDto.GroupProductsDto.Sum(p=> p.AddedQty + p.InputProductQuantity))</span>
                                            <span>licenser</span>
                                        </td>
                                        <td></td>

                                    </tr>

                                </table>

                            </div>
                        </div>
                    </div>


                    <!-- Purchased Products Table -->
                    <h5 class="mt-4 p-2 headerFont">Choose from licenses</h5>
                    <div class="m-4">
                        <div class="row mx-2 ">
                            <div class="col-sm-11 d-flex justify-content-sm-between align-baseline headerFont fs-7 bg-light p-2">
                                <div class="col-sm-3 ">
                                    Type
                                </div>
                                <div class="col-sm-3 ">
                                    Cost
                                </div>
                                <div class="col-sm-3 ">
                                    Remaining
                                </div>
                                <div class="col-sm-3 ">
                                    Quantity
                                </div>
                            </div>

                            <div class="col-sm-1">
                            </div>
                        </div>

                        <div class="row ">
                            <div class="col-sm-12">
                                <table class="table table-borderless">
                                    <tbody>
                                        @foreach (var Purchasedproduct in purchasedProductDtos)
                                        {
                                            int GP = Purchasedproduct.GetGPAvailability(selectedGroupDto.GroupProductsDto);
                                            <tr class="d-flex justify-content-sm-between align-baseline">
                                                <td>@Purchasedproduct.ProductName</td>
                                                <td>@Purchasedproduct.ProductPrice</td>
                                                <td>
                                                    <span>@Purchasedproduct.PurchasedQty - ( @GP ) = @(Purchasedproduct.PurchasedQty - GP)</span>
                                                </td>
                                                <td>
                                                    <div class="position-relative">
                                                        <input type="number"
                                                               min="0"
                                                               max="@(Purchasedproduct.PurchasedQty - GP)"
                                                               class="inputNumber"
                                                               id="inputNumber@(Purchasedproduct.PurchasedProductId)"
                                                   @bind-value="Purchasedproduct.InputPurchasedtQuantity"
                                                   @oninput="() => UpdatePurchasedProductQuantity(Purchasedproduct)" />

                                                        @if (Purchasedproduct.PurchasedQty - (GP + Purchasedproduct.InputPurchasedtQuantity) == 0)
                                                        {
                                                            <span class="position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle">
                                                            </span>
                                                        }
                                                    </div>
                                                </td>
                                                <td></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <div class="d-flex justify-content-end">
                                    <button class="btn btn-primary rounded-pill px-4 fw-bold" @onclick="()=>AddPurchasedQuantitiesTGroupProduct(selectedGroupDto)">Add</button>
                                </div>
                            </div>
                            <div class="d-flex justify-content-end m-2 gap-1">
                                <button class="btn btn-secondary rounded-pill px-5 " @onclick="undoChanges">Disgard</button>
                                <button class="btn btn-success rounded-pill px-5 " @onclick="()=>showChangesToUpdate(selectedGroupDto)">Save</button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card  p-2 ">
                        <!-- Purchased Products Table -->
                        <h4 class="mt-2 headerFont">Licenser til tildeling (@purchasedProductDtos.Sum(p=>p.PurchasedQty))</h4>
                        <h5 class="header2Font">  Licenser kan redigeres til d.@DateTime.UtcNow.ToString("dd MM yyyy"). </h5>
                        <table class="table table-borderless">
                            <thead class="">
                                <tr class="">
                                    <th>Type</th>
                                    <th>Cost</th>
                                    <th>Remaining</th>
                                </tr>
                            </thead>
                            <tbody class="">
                                @foreach (var Purchasedproduct in purchasedProductDtos)
                                {
                                    <tr>
                                        <td>@Purchasedproduct.ProductName</td>
                                        <td>@Purchasedproduct.ProductPrice</td>
                                        <td>@Purchasedproduct.PurchasedQty</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="d-flex justify-content-end ">
                            <button class="btnAddGroup rounded-pill" @onclick="()=>CreateGroup()">Create Group</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Total GroupProduct</th>
            <th>Total PurchasedProduct</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var change in changedGroupProductDtos)
        {
            <tr>
                <td>@change.Id</td>
                <td>@change.Name</td>
                <td>@change.GPChangeQuantity</td>
                <td>@change.PPChangeQuantity</td>
            </tr>
        }
    </tbody>
</table>


@code {
    private bool isLoading = true;
    private List<Changes> changedGroupProductDtos = new List<Changes>();
    private void showChangesToUpdate(GroupDto? selectedGroupDto)
    {
        changedGroupProductDtos.Clear();

        if (selectedGroupDto != null)
        {
            foreach (GroupProductDto groupProduct in selectedGroupDto.GroupProductsDto)
            {
                // Find the corresponding product in the selectedGroupDto by some identifier (e.g., ID or Name)
                var GP = selectedGroupDto.GroupProductsDto.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);
                var PP = purchasedProductDtos.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);

                if (GP != null && PP != null)
                {
                    var ch = new Changes
                        {
                            Id = GP.PurchasedProductId,
                            Name = GP.ProductName,
                            GPChangeQuantity = GP.InputProductQuantity + GP.AddedQty,
                            PPChangeQuantity = 0
                        };

                    changedGroupProductDtos.Add(ch);
                }
            }

            // Now, loop through PurchasedProductDto collection
            foreach (PurchasedProductDto purchasedProduct in purchasedProductDtos)
            {
                // Check if the PurchasedProductDto is not already in the changes list
                if (!changedGroupProductDtos.Any(ch => ch.Id == purchasedProduct.PurchasedProductId))
                {
                    // Create a Changes object for the PurchasedProductDto
                    var ch = new Changes
                        {
                            Id = purchasedProduct.PurchasedProductId,
                            Name = purchasedProduct.ProductName,
                            GPChangeQuantity = 0,  // You can set this to 0 or some default value
                            PPChangeQuantity = purchasedProduct.PurchasedQty
                        };

                    changedGroupProductDtos.Add(ch);
                }
            }
        }
    }

    private class Changes
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int GPChangeQuantity { get; set; }
        public int PPChangeQuantity { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadData();
        isLoading = false;
    }
    private async Task undoChanges()
    {
        await LoadData();
        ShowGroupDetails(selectedGroup.GroupId);
    }
    #region Param
    [Parameter]
    public int customerId { get; set; }
    private Customer? _customer = new Customer();
    private Group selectedGroup = new Group();
    private IEnumerable<Group> customerGroups = new List<Group>();
    private IEnumerable<PurchasedProduct> _PurchasedProducts = new List<PurchasedProduct>();
    private bool displayGroupProducts = true; // Flag to control GroupProduct Table display
    #endregion

    #region Dto Interacts Mehtods And Param

    private GroupDto? selectedGroupDto = new GroupDto();
    private IEnumerable<GroupDto> customerGroupsDto = new List<GroupDto>();
    private List<GroupProductDto>? groupProductDtos = new List<GroupProductDto>();
    private List<PurchasedProductDto>? purchasedProductDtos = new List<PurchasedProductDto>();

    private async Task LoadData()
    {
        // Load customer data, groups, and purchased products
        _customer = await _IGetCustomerWithGroupsAndProductsUC.ExecuteAsync(customerId);
        if (_customer != null)
        {
            // Load and map customer groups
            LoadCustomerGroups();

            // Load and map purchased products
            await LoadPurchasedProducts();
        }
    }
    private void LoadCustomerGroups()
    {
        customerGroups = _customer.Groups.ToList();
        if (customerGroups != null)
        {
            customerGroupsDto = customerGroups.Select(group => MapToGroupDto(group)).ToList();
        }
    }
    private async Task LoadPurchasedProducts()
    {
        _PurchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);
        if (_PurchasedProducts != null)
        {
            purchasedProductDtos = _PurchasedProducts.Select(p => MapToPurchasedProductDto(p)).ToList();
        }
    }
    private GroupDto MapToGroupDto(Group group)
    {
        if (group == null)
        {
            return null;
        }

        return new GroupDto
            {
                GroupId = group.GroupId,
                GroupName = group.GroupName,
                EAN = group.EAN,
                CustomerId = customerId,
                GroupProductsDto = group.GroupProducts.Select(gp => MapToGroupProductDto(gp)).ToList()
            };
    }
    private GroupProductDto MapToGroupProductDto(GroupProduct groupProduct)
    {
        if (groupProduct == null)
        {
            return null;
        }

        return new GroupProductDto
            {
                GroupId = groupProduct.GroupId,
                PurchasedProductId = groupProduct.PurchasedProductId,
                ProductName = groupProduct.PurchasedProduct?.ProductName,
                ProductPrice = groupProduct.PurchasedProduct?.ProductPrice ?? 0.00M,
                AddedQty = groupProduct.AddedQuantity

            };
    }
    private PurchasedProductDto MapToPurchasedProductDto(PurchasedProduct purchasedProduct)
    {
        if (purchasedProduct == null)
        {
            return null;
        }

        return new PurchasedProductDto
            {
                PurchasedProductId = purchasedProduct.ProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                PurchasedQty = purchasedProduct.PurchasedQty,
                CustomerId = customerId
            };
    }
    #endregion

    #region Manpulate
    private async Task UpdateGroupAsync()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirmation", $"Er du sikker på at du vil opdaterer gruppen\nAarhus Kommune {selectedGroupDto.GroupName}"); if (confirmed)
        {
            var result = await _IUpdateGroupNameUC.ExcecuteAsync(selectedGroupDto.GroupId, selectedGroupDto.GroupName);
            if (result)
            {
                // Update was successful, show a success notification
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Update Successful", "The group name has been updated successfully.", "success");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Update failed", "The group name has not  updated successfully.", "error");
        }
    }
    #endregion

    #region User Interacting
    private void RemoveProduct(GroupProductDto groupProduct)
    {
        PurchasedProductDto? PP = purchasedProductDtos?.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);

        if (PP != null)
        {

            // Add the removed quantity back to PurchasedQty
            PP.PurchasedQty += groupProduct.AddedQty;
            PP.InputPurchasedtQuantity = 0;
            // Remove the product from the list
            selectedGroupDto?.GroupProductsDto.Remove(groupProduct);
            StateHasChanged();
        }

    }
    private void UpdatePPQuantity(GroupProductDto groupProduct)
    {
        PurchasedProductDto? purchasedProduct = purchasedProductDtos?.FirstOrDefault(p => p.PurchasedProductId == groupProduct.PurchasedProductId);
        if (purchasedProduct != null)
        {
        }
        else
        {
            // Handle other logic as needed
        }
        StateHasChanged();
    }
    private void UpdatePurchasedProductQuantity(PurchasedProductDto? purchasedProduct)
    {
        // Find the corresponding GroupProduct
        GroupProductDto groupProductToUpdate = groupProductDtos.FirstOrDefault(gp => gp.PurchasedProductId == purchasedProduct.PurchasedProductId);

        if (groupProductToUpdate != null)
        {

        }
        else
        {

        }
    }
    private void AddPurchasedQuantitiesTGroupProduct(GroupDto selectedGroup)
    {
        if (purchasedProductDtos != null && purchasedProductDtos.Count() > 0)
        {
            foreach (PurchasedProductDto purchasedProduct in purchasedProductDtos)
            {
                if (purchasedProduct.InputPurchasedtQuantity <= 0)
                {
                    continue;
                }
                if (selectedGroup.GroupProductsDto != null)

                {
                    // Retrieve the corresponding product in the GroupProductsDto list
                    GroupProductDto? groupProductToUpdate = selectedGroup.GroupProductsDto
                     .FirstOrDefault(gp => gp.PurchasedProductId == purchasedProduct.PurchasedProductId);
                    // Get GP Availability
                    // the List<GP> has an object of type GP which GP_Id = PP_Id
                    if (groupProductToUpdate != null &&
                    (groupProductToUpdate.InputProductQuantity + purchasedProduct.InputPurchasedtQuantity) <= (purchasedProduct.PurchasedQty))
                    {
                        groupProductToUpdate.InputProductQuantity += purchasedProduct.InputPurchasedtQuantity;
                        purchasedProduct.InputPurchasedtQuantity = 0;
                    }
                    else
                    {
                        GroupProductDto newGroupProduct = new GroupProductDto
                            {
                                GroupId = selectedGroup.GroupId,
                                PurchasedProductId = purchasedProduct.PurchasedProductId,
                                ProductName = purchasedProduct.ProductName,
                                ProductPrice = purchasedProduct.ProductPrice,
                                AddedQty = 0,
                                InputProductQuantity = purchasedProduct.InputPurchasedtQuantity
                            };

                        selectedGroup.GroupProductsDto.Add(newGroupProduct);
                        purchasedProduct.InputPurchasedtQuantity = 0;
                    }

                    StateHasChanged();
                }
            }
        }

    }
    #endregion

    #region Helper Methods
    private void CreateNewGroupProduct(GroupDto selectedGroup, PurchasedProductDto purchasedProduct)
    {
        GroupProductDto newGroupProduct = new GroupProductDto
            {
                GroupId = selectedGroup.GroupId,
                PurchasedProductId = purchasedProduct.PurchasedProductId,
                ProductName = purchasedProduct.ProductName,
                ProductPrice = purchasedProduct.ProductPrice,
                AddedQty = purchasedProduct.InputPurchasedtQuantity,
                InputProductQuantity = purchasedProduct.InputPurchasedtQuantity
            };

        selectedGroup.GroupProductsDto.Add(newGroupProduct);
    }
    #endregion

    #region Methods
    private void ShowGroupDetails(int groupId)
    {
        if (groupId > 0)
        {
            // Find the selected group and set it as the selectedGroup
            selectedGroupDto = customerGroupsDto.FirstOrDefault(g => g.GroupId == groupId);
            displayGroupProducts = false; // Hide GroupProduct Table
        }
        else
        {
            // Clear the selectedGroup and show the GroupProduct Table
            selectedGroupDto = new GroupDto();
            displayGroupProducts = true;
        }
    }
    #endregion

    private async Task ShowValidationError(string message)
    {
        await JSRuntime.ShowValidationErrorAsync(message);
    }

    private void CreateGroup()
    {
        // Implement the logic to create a group here
        // For example, you can navigate to the CreateNewGroupPage with a route parameter
        NavigationManager.NavigateTo($"/create-group/{customerId}", forceLoad: true);
    }

}

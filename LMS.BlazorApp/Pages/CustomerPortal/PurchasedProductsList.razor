@page "/purchased-products/{customerId:int}"
@using LMS.BusinessUseCases.Dtos.PurchaseProducts;
@using LMS.BusinessUseCases.PurchasedProductsUC.PurchasedProductUCInterfaces;
@inject IGetPurchasedProductsByCustomerIdUC _IGetPurchasedProductsByCustomerIdUC
<h3>Purchased Products for Customer @customerId - Name </h3>

<!--Purchased Products For a Login Customer-->
<table class="table">
    <thead>
        <tr>

            <th>Type</th>
            <th>Cost</th>
            <th>Remaining</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
        @if (purchasedProducts != null)
        {
            @foreach (var product in purchasedProducts)
            {
                <tr>
                    <td>@product.ProductName</td>
                    <td>@product.ProductPrice</td>
                    <td>@product.PurchasedQty</td>
                    <td>
                        <input type="number"
                               min="0"
                               max="@product.PurchasedQty"
                       @bind="@product.PurchasedQty"
                       @bind:event="oninput" />
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">No purchased products found.</td>
            </tr>
        }
    </tbody>
</table>
<div class="btn btn-success">Add</div>

@code {
    [Parameter]
    public int customerId { get; set; } = 1;

    private IEnumerable<PurchasedProductDto>? purchasedProducts = new List<PurchasedProductDto>();

    protected override async Task OnParametersSetAsync()
    {
        // Call your service or repository method to fetch purchased products for the customer.
        purchasedProducts = await _IGetPurchasedProductsByCustomerIdUC.ExecuteAsync(customerId);
    }
}

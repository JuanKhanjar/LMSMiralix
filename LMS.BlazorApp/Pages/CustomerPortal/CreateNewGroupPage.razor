@page "/create-group/{customerId:int}"

@inject ICreateGroupUC _ICreateGroupUC
@inject IGetCustomerWithGroupsAndProductsUC _IGetCustomerWithGroupsAndProductsUC
@inject NavigationManager NavigationManager
@inject NotificationService _notificationService
@inject IJSRuntime JSRuntime

<div class="card">
    <div class="card-body">
        <h3>Welcome: @_customer.CustomerName</h3>
        <div class="card p-4 mb-2">
            <h6>Create a group and then Click edit to add Products</h6>
        </div>
        <div class="card p-2">
            <EditForm Model="_groupModel" OnValidSubmit="CreateGroupAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="GroupName">Group Name:</label>
                    <InputText id="GroupName" @bind-Value="_groupModel.GroupName" class="form-control" />
                    <ValidationMessage For="@(() => _groupModel.GroupName)" />
                </div>

                <div class="form-group m-2 p-2">
                    <button type="submit" class="btn btn-success">Create Group</button>
                </div>
            </EditForm>
        </div>
       @* <!-- Back Button -->
        <div class="form-group m-2 p-2">
            <button class="btn btn-secondary" @onclick="GoBack">Cancel</button>
        </div>*@
    </div>
</div>

@code {
    [Parameter]
    public int customerId { get; set; }
    private Customer? _customer = new Customer();
    private Group _groupModel = new Group();
    protected override async Task OnInitializedAsync()
    {
        _customer = await _IGetCustomerWithGroupsAndProductsUC.ExecuteAsync(customerId);
    }

    private async Task CreateGroupAsync()
    {
        try
        {
            Group? result = await _ICreateGroupUC.ExcecuteAsync(customerId, _groupModel.GroupName);
            if (result!=null)
            {
                // Group created successfully, navigate to a success page or perform other actions
                await _notificationService.ShowSuccessNotification("Group created successfully!", $"The Group Name Is: {result.GroupName}");
                NavigationManager.NavigateTo($"/customer/{_customer.CustomerId}", forceLoad: true);
            }
            else
            {
                // Group creation failed, show error notification
                await _notificationService.ShowErrorNotification("Group creation failed.","Some thing went erong!,Try Again");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions, log errors, or display error messages
            Console.WriteLine(ex);
        }
    }
    private void GoBack()
    {
        // Navigate back to the customer page
        NavigationManager.NavigateTo($"/customer/{_customer.CustomerId}");
    }
}


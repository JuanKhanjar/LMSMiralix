
@inject IGetGroupWithProductsUC _IGetGroupWithProductsUC
<p>Customer Id: @CustomerId</p>
@if (group != null)
{
    
    <p>ID: @group.GroupId</p>
    <p>Group Name: @group.GroupName</p>
    <p>EAN: @group.EAN</p>

    @if (group.GroupProducts != null && group.GroupProducts.Any())
    {
        <h4>Products</h4>
        <ul>
            @foreach (var product in group.GroupProducts)
            {
                <li>@product.Product.ProductName - Price: @product.Product.ProductPrice, Quantity: @product.Product.PurchasedQty</li>
            }
        </ul>
    }
    else
    {
        <p>No products available for this group.</p>
    }
}
else
{
    <p>Group not found.</p>
}

@code {
    [Parameter] public int CustomerId { get; set; }
    [Parameter] public int GroupId { get; set; }

    private Group group { get; set; } = new Group();

    protected override async Task OnInitializedAsync()
    {
        group = await _IGetGroupWithProductsUC.ExecuteAsync(CustomerId, GroupId);
    }
}
